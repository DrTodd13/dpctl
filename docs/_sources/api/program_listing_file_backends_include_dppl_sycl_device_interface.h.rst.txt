
.. _program_listing_file_backends_include_dppl_sycl_device_interface.h:

Program Listing for File dppl_sycl_device_interface.h
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_backends_include_dppl_sycl_device_interface.h>` (``backends/include/dppl_sycl_device_interface.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //===---------- dppl_sycl_device_interface.h - dpctl-C_API ---*---C++ -*---===//
   //
   //               Data Parallel Control Library (dpCtl)
   //
   // Copyright 2020 Intel Corporation
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //    http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   //
   //===----------------------------------------------------------------------===//
   //===----------------------------------------------------------------------===//
   
   #pragma once
   
   #include "dppl_data_types.h"
   #include "dppl_sycl_enum_types.h"
   #include "dppl_sycl_types.h"
   #include "Support/DllExport.h"
   #include "Support/ExternC.h"
   #include "Support/MemOwnershipAttrs.h"
   
   DPPL_C_EXTERN_C_BEGIN
   
   DPPL_API
   void DPPLDevice_DumpInfo (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   void DPPLDevice_Delete (__dppl_take DPPLSyclDeviceRef DRef);
   
   DPPL_API
   bool DPPLDevice_IsAccelerator (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   bool DPPLDevice_IsCPU (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   bool DPPLDevice_IsGPU (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   bool DPPLDevice_IsHost (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   __dppl_give const char*
   DPPLDevice_GetDriverInfo (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   uint32_t
   DPPLDevice_GetMaxComputeUnits (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   uint32_t
   DPPLDevice_GetMaxWorkItemDims (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   __dppl_keep size_t*
   DPPLDevice_GetMaxWorkItemSizes (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   size_t
   DPPLDevice_GetMaxWorkGroupSize (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   uint32_t
   DPPLDevice_GetMaxNumSubGroups (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   bool
   DPPLDevice_HasInt64BaseAtomics (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   bool
   DPPLDevice_HasInt64ExtendedAtomics (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   __dppl_give const char*
   DPPLDevice_GetName (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   __dppl_give const char*
   DPPLDevice_GetVendorName (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   bool DPPLDevice_IsHostUnifiedMemory (__dppl_keep const DPPLSyclDeviceRef DRef);
   
   DPPL_API
   bool DPPLDevice_AreEq (__dppl_keep const DPPLSyclDeviceRef DevRef1,
                          __dppl_keep const DPPLSyclDeviceRef DevRef2);
   DPPL_C_EXTERN_C_END
