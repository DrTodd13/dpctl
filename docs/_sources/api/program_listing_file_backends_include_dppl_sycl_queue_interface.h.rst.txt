
.. _program_listing_file_backends_include_dppl_sycl_queue_interface.h:

Program Listing for File dppl_sycl_queue_interface.h
====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_backends_include_dppl_sycl_queue_interface.h>` (``backends/include/dppl_sycl_queue_interface.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //===----------- dppl_sycl_queue_interface.h - dpctl-C_API ---*---C++ -*---===//
   //
   //               Data Parallel Control Library (dpCtl)
   //
   // Copyright 2020 Intel Corporation
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //    http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   //
   //===----------------------------------------------------------------------===//
   //===----------------------------------------------------------------------===//
   
   #pragma once
   
   #include "dppl_data_types.h"
   #include "dppl_sycl_enum_types.h"
   #include "dppl_sycl_types.h"
   #include "Support/DllExport.h"
   #include "Support/ExternC.h"
   #include "Support/MemOwnershipAttrs.h"
   
   DPPL_C_EXTERN_C_BEGIN
   
   DPPL_API
   void DPPLQueue_Delete (__dppl_take DPPLSyclQueueRef QRef);
   
   DPPL_API
   bool DPPLQueue_AreEq (__dppl_keep const DPPLSyclQueueRef QRef1,
                         __dppl_keep const DPPLSyclQueueRef QRef2);
   
   DPPL_API
   DPPLSyclBackendType DPPLQueue_GetBackend (__dppl_keep DPPLSyclQueueRef QRef);
   
   DPPL_API
   __dppl_give DPPLSyclContextRef
   DPPLQueue_GetContext (__dppl_keep const DPPLSyclQueueRef QRef);
   
   DPPL_API
   __dppl_give DPPLSyclDeviceRef
   DPPLQueue_GetDevice (__dppl_keep const DPPLSyclQueueRef QRef);
   
   DPPL_API
   DPPLSyclEventRef
   DPPLQueue_SubmitRange (__dppl_keep const DPPLSyclKernelRef KRef,
                          __dppl_keep const DPPLSyclQueueRef QRef,
                          __dppl_keep void **Args,
                          __dppl_keep const DPPLKernelArgType *ArgTypes,
                          size_t NArgs,
                          __dppl_keep const size_t Range[3],
                          size_t NRange,
                          __dppl_keep const DPPLSyclEventRef *DepEvents,
                          size_t NDepEvents);
   
   DPPL_API
   DPPLSyclEventRef
   DPPLQueue_SubmitNDRange(__dppl_keep const DPPLSyclKernelRef KRef,
                           __dppl_keep const DPPLSyclQueueRef QRef,
                           __dppl_keep void **Args,
                           __dppl_keep const DPPLKernelArgType *ArgTypes,
                           size_t NArgs,
                           __dppl_keep const size_t gRange[3],
                           __dppl_keep const size_t lRange[3],
                           size_t NDims,
                           __dppl_keep const DPPLSyclEventRef *DepEvents,
                           size_t NDepEvents);
   
   DPPL_API
   void
   DPPLQueue_Wait (__dppl_keep const DPPLSyclQueueRef QRef);
   
   DPPL_API
   void DPPLQueue_Memcpy (__dppl_keep const DPPLSyclQueueRef QRef,
                          void *Dest, const void *Src, size_t Count);
   
   DPPL_C_EXTERN_C_END
