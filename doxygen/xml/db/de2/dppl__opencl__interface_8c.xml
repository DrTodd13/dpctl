<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="db/de2/dppl__opencl__interface_8c" kind="file" language="C++">
    <compoundname>dppl_opencl_interface.c</compoundname>
    <includes refid="d0/da0/dppl__opencl__interface_8h" local="yes">dppl_opencl_interface.h</includes>
    <includes refid="d0/dcd/error__check__macros_8h" local="yes">error_check_macros.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">CL/cl.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="8">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>dppl_opencl_interface.c</label>
        <link refid="db/de2/dppl__opencl__interface_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>CL/cl.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>error_check_macros.h</label>
        <link refid="d0/dcd/error__check__macros_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>dppl_opencl_interface.h</label>
        <link refid="d0/da0/dppl__opencl__interface_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="db/de2/dppl__opencl__interface_8c_1a385688f3020e1ab2acf7a2e319b2129b" prot="public" static="no">
        <name>BUFFER_ID</name>
        <initializer>0xc55c47b1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="36" column="9" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="db/de2/dppl__opencl__interface_8c_1a8eb53357ffb7c418d2c467a215fbb26f" prot="public" static="no">
        <name>ENV_ID</name>
        <initializer>0x6c78fd87</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="35" column="9" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="db/de2/dppl__opencl__interface_8c_1ab53adb106bfbfc72bc0918855fccdb18" prot="public" static="no">
        <name>KERNEL_ID</name>
        <initializer>0x032dc08e</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="37" column="9" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="db/de2/dppl__opencl__interface_8c_1a5acec311e79957cffc6bbea180ddfe7f" prot="public" static="no">
        <name>KERNELARG_ID</name>
        <initializer>0xd42f630f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="39" column="9" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="db/de2/dppl__opencl__interface_8c_1a9cf8e26bf4dfe819f195c5709d9a87cc" prot="public" static="no">
        <name>PROGRAM_ID</name>
        <initializer>0xc3842d12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="38" column="9" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="db/de2/dppl__opencl__interface_8c_1aa07449fd5913461a429c7617af12b31c" prot="public" static="no">
        <name>RUNTIME_ID</name>
        <initializer>0x6dd5e8c8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="34" column="9" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a4128360b3dff32134797e6ca01cc5c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int build_dp_program</definition>
        <argsstring>(env_t env_t_ptr, program_t program_t_ptr)</argsstring>
        <name>build_dp_program</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1afad71e6b9f69f779865c7b36fdab8695" kindref="member">program_t</ref></type>
          <declname>program_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="910" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="910" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a10bb203dc942c335fabae52b0eca335c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int create_dp_env_t</definition>
        <argsstring>(cl_platform_id *platforms, size_t nplatforms, cl_device_type device_ty, env_t *env_t_ptr)</argsstring>
        <name>create_dp_env_t</name>
        <param>
          <type>cl_platform_id *</type>
          <declname>platforms</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nplatforms</declname>
        </param>
        <param>
          <type>cl_device_type</type>
          <declname>device_ty</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref> *</type>
          <declname>env_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="328" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="328" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a76f1199c6a0b3b1f3301f4346ddb941f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_kernel</definition>
        <argsstring>(env_t env_t_ptr, program_t program_t_ptr, const char *kernel_name, kernel_t *kernel_ptr)</argsstring>
        <name>create_dp_kernel</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1afad71e6b9f69f779865c7b36fdab8695" kindref="member">program_t</ref></type>
          <declname>program_t_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kernel_name</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a4032a461689a915b743ca9d075ad8570" kindref="member">kernel_t</ref> *</type>
          <declname>kernel_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="941" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="941" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a7659b305f3780aa0858c919b6baf4fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_kernel_arg</definition>
        <argsstring>(const void *arg_value, size_t arg_size, kernel_arg_t *kernel_arg_t_ptr)</argsstring>
        <name>create_dp_kernel_arg</name>
        <param>
          <type>const void *</type>
          <declname>arg_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>arg_size</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1ad6b9cfe3b0fec6fcd179adf2ed2fa12f" kindref="member">kernel_arg_t</ref> *</type>
          <declname>kernel_arg_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="1005" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="1005" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1ac57c05f82c1675fd6cc62c397d33fc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_kernel_arg_from_buffer</definition>
        <argsstring>(buffer_t *buffer_t_ptr, kernel_arg_t *kernel_arg_t_ptr)</argsstring>
        <name>create_dp_kernel_arg_from_buffer</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a162ccb3cf5ba5fd158c0526cb59412c5" kindref="member">buffer_t</ref> *</type>
          <declname>buffer_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1ad6b9cfe3b0fec6fcd179adf2ed2fa12f" kindref="member">kernel_arg_t</ref> *</type>
          <declname>kernel_arg_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="1037" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="1037" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a43b3debedd923d396376be492fbc02d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_program_from_source</definition>
        <argsstring>(env_t env_t_ptr, unsigned int count, const char **strings, const size_t *lengths, program_t *program_t_ptr)</argsstring>
        <name>create_dp_program_from_source</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>strings</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>lengths</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1afad71e6b9f69f779865c7b36fdab8695" kindref="member">program_t</ref> *</type>
          <declname>program_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="844" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="844" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1ab1a000f75915669913b4de99edbea1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_program_from_spirv</definition>
        <argsstring>(env_t env_t_ptr, const void *il, size_t length, program_t *program_t_ptr)</argsstring>
        <name>create_dp_program_from_spirv</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>il</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1afad71e6b9f69f779865c7b36fdab8695" kindref="member">program_t</ref> *</type>
          <declname>program_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="791" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="791" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1aa8cc64501aa87250c4a49fcaec2fb0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_runtime</definition>
        <argsstring>(runtime_t *rt)</argsstring>
        <name>create_dp_runtime</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a02fe9218ba15ed9a5addc7b692d4b8f5" kindref="member">runtime_t</ref> *</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
<para>Initializes a new <ref refid="d5/d9e/structdp__runtime__t" kindref="compound">dp_runtime_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="517" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="517" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a23a6c90c5ab9623c4a8c465bc84648eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_rw_mem_buffer</definition>
        <argsstring>(env_t env_t_ptr, size_t buffsize, buffer_t *buffer_t_ptr)</argsstring>
        <name>create_dp_rw_mem_buffer</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffsize</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a162ccb3cf5ba5fd158c0526cb59412c5" kindref="member">buffer_t</ref> *</type>
          <declname>buffer_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="629" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="629" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a4509cd8e02bae4d781b629841d1765c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int destroy_dp_env_t</definition>
        <argsstring>(env_t *env_t_ptr)</argsstring>
        <name>destroy_dp_env_t</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref> *</type>
          <declname>env_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="406" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="406" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1ad208cdc7cf60e150f128ae54e3073216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_kernel</definition>
        <argsstring>(kernel_t *kernel_ptr)</argsstring>
        <name>destroy_dp_kernel</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a4032a461689a915b743ca9d075ad8570" kindref="member">kernel_t</ref> *</type>
          <declname>kernel_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="981" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="981" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a907bd92804f632a6188250d45b0a245f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_kernel_arg</definition>
        <argsstring>(kernel_arg_t *kernel_arg_t_ptr)</argsstring>
        <name>destroy_dp_kernel_arg</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1ad6b9cfe3b0fec6fcd179adf2ed2fa12f" kindref="member">kernel_arg_t</ref> *</type>
          <declname>kernel_arg_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="1051" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="1051" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1afc1c8661c40ec9b1f64e11d93909926d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_program</definition>
        <argsstring>(program_t *program_ptr)</argsstring>
        <name>destroy_dp_program</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1afad71e6b9f69f779865c7b36fdab8695" kindref="member">program_t</ref> *</type>
          <declname>program_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="889" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="889" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1ae35d77471215c8e2ab7dd09f07e21eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_runtime</definition>
        <argsstring>(runtime_t *rt)</argsstring>
        <name>destroy_dp_runtime</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a02fe9218ba15ed9a5addc7b692d4b8f5" kindref="member">runtime_t</ref> *</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
<para>Free the runtime and all its resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="552" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="552" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1af3c68c97b5f2334f97635c71edb0e586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_rw_mem_buffer</definition>
        <argsstring>(buffer_t *buff)</argsstring>
        <name>destroy_dp_rw_mem_buffer</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a162ccb3cf5ba5fd158c0526cb59412c5" kindref="member">buffer_t</ref> *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="677" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="677" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a2c401d4ad69f11a771dc4a58bd8a880e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int dump_device_info</definition>
        <argsstring>(void *obj)</argsstring>
        <name>dump_device_info</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="107" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="107" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1aaa3b67135dac50526ddc257793b08b68" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int dump_dp_kernel_info</definition>
        <argsstring>(void *obj)</argsstring>
        <name>dump_dp_kernel_info</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="207" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="207" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a3d83f203a339431e431d72f6a399d591" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int dump_dp_runtime_info</definition>
        <argsstring>(void *obj)</argsstring>
        <name>dump_dp_runtime_info</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Helper function to print out information about the platform and devices available to this runtime. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="180" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="180" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a68cb02da23bec3576c644d14b3daeb44" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get_first_device</definition>
        <argsstring>(cl_platform_id *platforms, cl_uint platformCount, cl_device_id *device, cl_device_type device_ty)</argsstring>
        <name>get_first_device</name>
        <param>
          <type>cl_platform_id *</type>
          <declname>platforms</declname>
        </param>
        <param>
          <type>cl_uint</type>
          <declname>platformCount</declname>
        </param>
        <param>
          <type>cl_device_id *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>cl_device_type</type>
          <declname>device_ty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="249" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="249" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a10325110db7c1f163859a41bb14b5154" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get_platform_name</definition>
        <argsstring>(cl_platform_id platform, char **platform_name)</argsstring>
        <name>get_platform_name</name>
        <param>
          <type>cl_platform_id</type>
          <declname>platform</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>platform_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="78" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="78" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a6648d8c05fcb1f61fa69bd5e1154c13e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int init_runtime_t_obj</definition>
        <argsstring>(runtime_t rt)</argsstring>
        <name>init_runtime_t_obj</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a02fe9218ba15ed9a5addc7b692d4b8f5" kindref="member">runtime_t</ref></type>
          <declname>rt</declname>
        </param>
        <briefdescription>
<para>Initialize the runtime object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="431" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="431" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1aef01861e0900d1291ab23b09beaa52e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_dp_mem_buffer_from_device</definition>
        <argsstring>(env_t env_t_ptr, buffer_t buffer_t_ptr, bool blocking, size_t offset, size_t buffersize, void *data_ptr)</argsstring>
        <name>read_dp_mem_buffer_from_device</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a162ccb3cf5ba5fd158c0526cb59412c5" kindref="member">buffer_t</ref></type>
          <declname>buffer_t_ptr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffersize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="746" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="746" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a1dff6cc96c6c5c712d2ed9a221919fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int release_dp_context</definition>
        <argsstring>(env_t env_t_ptr)</argsstring>
        <name>release_dp_context</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="612" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="612" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a042f0d172f36953491338b4049dc740f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int retain_dp_context</definition>
        <argsstring>(env_t env_t_ptr)</argsstring>
        <name>retain_dp_context</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="592" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="592" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1abf6adff83e785bc3de2deb4fb34a8ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_args_and_enqueue_dp_kernel</definition>
        <argsstring>(env_t env_t_ptr, kernel_t kernel_t_ptr, size_t nargs, const kernel_arg_t *array_of_args, unsigned int work_dim, const size_t *global_work_offset, const size_t *global_work_size, const size_t *local_work_size)</argsstring>
        <name>set_args_and_enqueue_dp_kernel</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a4032a461689a915b743ca9d075ad8570" kindref="member">kernel_t</ref></type>
          <declname>kernel_t_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nargs</declname>
        </param>
        <param>
          <type>const <ref refid="d0/da0/dppl__opencl__interface_8h_1ad6b9cfe3b0fec6fcd179adf2ed2fa12f" kindref="member">kernel_arg_t</ref> *</type>
          <declname>array_of_args</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>work_dim</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>global_work_offset</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>global_work_size</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>local_work_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="1066" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="1066" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a7522e1967af436d88e8e8fec48dda403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_args_and_enqueue_dp_kernel_auto_blocking</definition>
        <argsstring>(env_t env_t_ptr, kernel_t kernel_t_ptr, size_t nargs, const kernel_arg_t *args, unsigned int num_dims, size_t *dim_starts, size_t *dim_stops)</argsstring>
        <name>set_args_and_enqueue_dp_kernel_auto_blocking</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a4032a461689a915b743ca9d075ad8570" kindref="member">kernel_t</ref></type>
          <declname>kernel_t_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nargs</declname>
        </param>
        <param>
          <type>const <ref refid="d0/da0/dppl__opencl__interface_8h_1ad6b9cfe3b0fec6fcd179adf2ed2fa12f" kindref="member">kernel_arg_t</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_dims</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dim_starts</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dim_stops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="1127" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="1127" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1af65969c48ec4f4c39acbfa713457dcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_curr_env</definition>
        <argsstring>(runtime_t rt, env_t env)</argsstring>
        <name>set_curr_env</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a02fe9218ba15ed9a5addc7b692d4b8f5" kindref="member">runtime_t</ref></type>
          <declname>rt</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="504" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="504" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1ae9e5c8f231f81cfba8de768d9dda34e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int support_float64_atomics</definition>
        <argsstring>(cl_device_id *device)</argsstring>
        <name>support_float64_atomics</name>
        <param>
          <type>cl_device_id *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="303" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="303" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a7baa075ca2dc847d52ab33f215212df8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int support_int64_atomics</definition>
        <argsstring>(cl_device_id *device)</argsstring>
        <name>support_int64_atomics</name>
        <param>
          <type>cl_device_id *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="281" column="12" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="281" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="db/de2/dppl__opencl__interface_8c_1a0afb574a98ff37f7398873d66d05d953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int write_dp_mem_buffer_to_device</definition>
        <argsstring>(env_t env_t_ptr, buffer_t buffer_t_ptr, bool blocking, size_t offset, size_t buffersize, const void *data_ptr)</argsstring>
        <name>write_dp_mem_buffer_to_device</name>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="d0/da0/dppl__opencl__interface_8h_1a162ccb3cf5ba5fd158c0526cb59412c5" kindref="member">buffer_t</ref></type>
          <declname>buffer_t_ptr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffersize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" line="698" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c" bodystart="698" bodyend="743"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This file implements the data types and functions declared in <ref refid="d0/da0/dppl__opencl__interface_8h" kindref="compound">dppl_opencl_interface.h</ref>. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===------------<sp/>dppl_opencl_interface.c<sp/>-<sp/>dpctl-C_API<sp/>----*-<sp/>C<sp/>-----*----===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>Parallel<sp/>Control<sp/>Library<sp/>(dpCtl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/da0/dppl__opencl__interface_8h" kindref="compound">dppl_opencl_interface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/dcd/error__check__macros_8h" kindref="compound">error_check_macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CL/cl.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>OpenCL<sp/>headers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------<sp/>Magic<sp/>numbers<sp/>------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="db/de2/dppl__opencl__interface_8c_1aa07449fd5913461a429c7617af12b31c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RUNTIME_ID<sp/><sp/><sp/>0x6dd5e8c8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="db/de2/dppl__opencl__interface_8c_1a8eb53357ffb7c418d2c467a215fbb26f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENV_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6c78fd87</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="db/de2/dppl__opencl__interface_8c_1a385688f3020e1ab2acf7a2e319b2129b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUFFER_ID<sp/><sp/><sp/><sp/>0xc55c47b1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="db/de2/dppl__opencl__interface_8c_1ab53adb106bfbfc72bc0918855fccdb18" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KERNEL_ID<sp/><sp/><sp/><sp/>0x032dc08e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="db/de2/dppl__opencl__interface_8c_1a9cf8e26bf4dfe819f195c5709d9a87cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROGRAM_ID<sp/><sp/><sp/>0xc3842d12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="db/de2/dppl__opencl__interface_8c_1a5acec311e79957cffc6bbea180ddfe7f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KERNELARG_ID<sp/>0xd42f630f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_runtime_id<sp/>(<ref refid="d5/d48/structdp__runtime" kindref="compound">runtime_t</ref><sp/>x)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x-&gt;<ref refid="d5/d48/structdp__runtime_1ad785d329557ebd7b6e307e2811a8d60c" kindref="member">id_</ref><sp/>==<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1aa07449fd5913461a429c7617af12b31c" kindref="member">RUNTIME_ID</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_env_id<sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>x)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x-&gt;<ref refid="dd/d9f/structdp__env_1a5b118346b049b427d0ad4ebd91d620d6" kindref="member">id_</ref><sp/>==<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a8eb53357ffb7c418d2c467a215fbb26f" kindref="member">ENV_ID</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_buffer_id<sp/>(<ref refid="d3/d90/structdp__buffer" kindref="compound">buffer_t</ref><sp/>x)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x-&gt;<ref refid="d3/d90/structdp__buffer_1a67a8a4d388ab614577e22c233282b867" kindref="member">id_</ref><sp/>==<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a385688f3020e1ab2acf7a2e319b2129b" kindref="member">BUFFER_ID</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_kernel_id<sp/>(<ref refid="d1/d41/structdp__kernel" kindref="compound">kernel_t</ref><sp/>x)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x-&gt;<ref refid="d1/d41/structdp__kernel_1a411402b06ff840a33a3aa1730c8074c8" kindref="member">id_</ref><sp/>==<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1ab53adb106bfbfc72bc0918855fccdb18" kindref="member">KERNEL_ID</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_program_id<sp/>(<ref refid="da/d21/structdp__program" kindref="compound">program_t</ref><sp/>x)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x-&gt;<ref refid="da/d21/structdp__program_1a25795513ea0cde7c0716dede44c65c73" kindref="member">id_</ref><sp/>==<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a9cf8e26bf4dfe819f195c5709d9a87cc" kindref="member">PROGRAM_ID</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_kernelarg_id<sp/>(<ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>x)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x-&gt;<ref refid="d1/df7/structdp__kernel__arg_1a367c05865e2577a77cbd98712929aab0" kindref="member">id_</ref><sp/>==<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a5acec311e79957cffc6bbea180ddfe7f" kindref="member">KERNELARG_ID</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------<sp/>Private<sp/>helpers<sp/>----------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_platform_name<sp/>(cl_platform_id<sp/>platform,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**platform_name)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetPlatformInfo(platform,<sp/>CL_PLATFORM_NAME,<sp/>0,<sp/>*platform_name,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>platform<sp/>name<sp/>length.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>platform<sp/>name<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>*platform_name<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*n);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>*platform_name);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetPlatformInfo(platform,<sp/>CL_PLATFORM_NAME,<sp/>n,<sp/>*platform_name,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>platform<sp/>name.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*platform_name);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dump_device_info<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_uint<sp/>maxComputeUnits;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>env_t_ptr<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref>)obj;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_device_id<sp/>device<sp/>=<sp/>(cl_device_id)(env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1acaebd487623f5184afaa8cc9e1484298" kindref="member">device</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainDevice(device);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>retain<sp/>device.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>device<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetDeviceInfo(device,<sp/>CL_DEVICE_NAME,<sp/>0,<sp/>NULL,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>device<sp/>name.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(size);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetDeviceInfo(device,<sp/>CL_DEVICE_NAME,<sp/>size,<sp/>value,<sp/>NULL);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>device<sp/>name.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Device:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>hardware<sp/>device<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetDeviceInfo(device,<sp/>CL_DEVICE_VERSION,<sp/>0,<sp/>NULL,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>device<sp/>version.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(size);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetDeviceInfo(device,<sp/>CL_DEVICE_VERSION,<sp/>size,<sp/>value,<sp/>NULL);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>device<sp/>version.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Hardware<sp/>version:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>software<sp/>driver<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>clGetDeviceInfo(device,<sp/>CL_DRIVER_VERSION,<sp/>0,<sp/>NULL,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>driver<sp/>version.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(size);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>clGetDeviceInfo(device,<sp/>CL_DRIVER_VERSION,<sp/>size,<sp/>value,<sp/>NULL);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>driver<sp/>version.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Software<sp/>version:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>c<sp/>version<sp/>supported<sp/>by<sp/>compiler<sp/>for<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>clGetDeviceInfo(device,<sp/>CL_DEVICE_OPENCL_C_VERSION,<sp/>0,<sp/>NULL,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>open<sp/>cl<sp/>version.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(size);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>clGetDeviceInfo(device,<sp/>CL_DEVICE_OPENCL_C_VERSION,<sp/>size,<sp/>value,<sp/>NULL);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>open<sp/>cl<sp/>version.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;OpenCL<sp/>C<sp/>version:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>parallel<sp/>compute<sp/>units</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>clGetDeviceInfo(device,<sp/>CL_DEVICE_MAX_COMPUTE_UNITS,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(maxComputeUnits),<sp/>&amp;maxComputeUnits,<sp/>NULL);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>number<sp/>of<sp/>compute<sp/>units.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Parallel<sp/>compute<sp/>units:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>maxComputeUnits);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseDevice(device);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>release<sp/>device.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dump_dp_runtime_info<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d48/structdp__runtime" kindref="compound">runtime_t</ref><sp/>rt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>rt<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a02fe9218ba15ed9a5addc7b692d4b8f5" kindref="member">runtime_t</ref>)obj;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>check_runtime_id(rt);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rt)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>platforms<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl_platform_id<sp/>*platforms<sp/>=<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a5d5bb42519c837eea086b15bf13d2506" kindref="member">platform_ids</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*platform_name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_platform_name(platforms[i],<sp/>&amp;platform_name);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Platform<sp/>#%zu:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>platform_name);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(platform_name);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dump_dp_kernel_info<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_uint<sp/>numKernelArgs;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_kernel<sp/>kernel;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d41/structdp__kernel" kindref="compound">kernel_t</ref><sp/>kernel_t_ptr;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel_t_ptr<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a4032a461689a915b743ca9d075ad8570" kindref="member">kernel_t</ref>)obj;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>check_kernel_id(kernel_t_ptr);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel<sp/>=<sp/>(cl_kernel)(kernel_t_ptr-&gt;<ref refid="d1/d41/structdp__kernel_1a95dd37c1dba4059dd0a0a1af03a5d594" kindref="member">kernel</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>kernel<sp/>function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetKernelInfo(kernel,<sp/>CL_KERNEL_FUNCTION_NAME,<sp/>0,<sp/>NULL,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>kernel<sp/>function<sp/>name<sp/>size.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(size);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetKernelInfo(kernel,<sp/>CL_KERNEL_FUNCTION_NAME,<sp/>size,<sp/>value,<sp/>NULL);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>kernel<sp/>function<sp/>name.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Kernel<sp/>Function<sp/>name:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>number<sp/>of<sp/>kernel<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetKernelInfo(kernel,<sp/>CL_KERNEL_NUM_ARGS,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(numKernelArgs),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;numKernelArgs,<sp/>NULL);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>kernel<sp/>num<sp/>args.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>kernel<sp/>arguments<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>numKernelArgs);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_first_device<sp/>(cl_platform_id*<sp/>platforms,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl_uint<sp/>platformCount,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl_device_id<sp/>*device,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl_device_type<sp/>device_ty)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>status;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_uint<sp/>ndevices<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>platformCount;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>all<sp/>devices<sp/>of<sp/>env_ty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>clGetDeviceIDs(platforms[i],<sp/>device_ty,<sp/>0,<sp/>NULL,<sp/>&amp;ndevices);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>platform<sp/>has<sp/>no<sp/>devices<sp/>of<sp/>this<sp/>type<sp/>then<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ndevices)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>first<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>clGetDeviceIDs(platforms[i],<sp/>device_ty,<sp/>1,<sp/>device,<sp/>NULL);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(status,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>first<sp/>cl_device_id.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>first<sp/>device<sp/>of<sp/>this<sp/>type<sp/>was<sp/>discovered,<sp/>no<sp/>need<sp/>to<sp/>look<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ndevices)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ndevices)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>support_int64_atomics(cl_device_id<sp/>*device)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetDeviceInfo(*device,<sp/>CL_DEVICE_EXTENSIONS,<sp/>0,<sp/>NULL,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>CL_SUCCESS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>obtain<sp/>device<sp/>info<sp/>for<sp/>param\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(size);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>clGetDeviceInfo(*device,<sp/>CL_DEVICE_EXTENSIONS,<sp/>size,<sp/>value,<sp/>NULL);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strstr(value,<sp/></highlight><highlight class="stringliteral">&quot;cl_khr_int64_base_atomics&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>support_float64_atomics(cl_device_id<sp/>*device)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetDeviceInfo(*device,<sp/>CL_DEVICE_EXTENSIONS,<sp/>0,<sp/>NULL,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>CL_SUCCESS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>obtain<sp/>device<sp/>info<sp/>for<sp/>param\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(size);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>clGetDeviceInfo(*device,<sp/>CL_DEVICE_EXTENSIONS,<sp/>size,<sp/>value,<sp/>NULL);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strstr(value,<sp/></highlight><highlight class="stringliteral">&quot;cl_khr_fp64&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_dp_env_t<sp/>(cl_platform_id*<sp/>platforms,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nplatforms,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl_device_type<sp/>device_ty,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>*env_t_ptr)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err1;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_device_id<sp/>*device;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>env<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>device<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>env_t<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>env<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" kindref="member">env_t</ref>)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="dd/d9f/structdp__env" kindref="compound">dp_env</ref>));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref>,<sp/>env);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1a5b118346b049b427d0ad4ebd91d620d6" kindref="member">id_</ref><sp/>=<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a8eb53357ffb7c418d2c467a215fbb26f" kindref="member">ENV_ID</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1acaebd487623f5184afaa8cc9e1484298" kindref="member">device</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1ad5a7563e4b9b8d43286b970e440e0725" kindref="member">queue</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1ac1c747b9c812e986f57bbd2b161762ce" kindref="member">max_work_item_dims</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1af84974f230719cf38988b6d6681058df" kindref="member">max_work_group_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1ad16df897c31528dfccd1e06df349634d" kindref="member">dump_fn</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>device<sp/>=<sp/>(cl_device_id*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cl_device_id));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>err1<sp/>=<sp/>get_first_device(platforms,<sp/>nplatforms,<sp/>device,<sp/>device_ty);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a3d05d4ff53571d917db5a64a5afe5ac5" kindref="member">CHECK_DPGLUE_ERROR</ref>(err1,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>inside<sp/>get_first_device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS<sp/>for<sp/>this<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetDeviceInfo(*device,<sp/>CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(env-&gt;<ref refid="dd/d9f/structdp__env_1ac1c747b9c812e986f57bbd2b161762ce" kindref="member">max_work_item_dims</ref>),<sp/>&amp;env-&gt;<ref refid="dd/d9f/structdp__env_1ac1c747b9c812e986f57bbd2b161762ce" kindref="member">max_work_item_dims</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>max<sp/>work<sp/>item<sp/>dims&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>CL_DEVICE_MAX_WORK_GROUP_SIZE<sp/>for<sp/>this<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clGetDeviceInfo(*device,<sp/>CL_DEVICE_MAX_WORK_GROUP_SIZE,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(env-&gt;<ref refid="dd/d9f/structdp__env_1af84974f230719cf38988b6d6681058df" kindref="member">max_work_group_size</ref>),<sp/>&amp;env-&gt;<ref refid="dd/d9f/structdp__env_1af84974f230719cf38988b6d6681058df" kindref="member">max_work_group_size</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>max<sp/>work<sp/>group<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>context<sp/>and<sp/>associate<sp/>it<sp/>with<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref><sp/>=<sp/>clCreateContext(NULL,<sp/>1,<sp/>device,<sp/>NULL,<sp/>NULL,<sp/>&amp;err);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>device<sp/>context.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>queue<sp/>and<sp/>associate<sp/>it<sp/>with<sp/>the<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1ad5a7563e4b9b8d43286b970e440e0725" kindref="member">queue</ref><sp/>=<sp/>clCreateCommandQueueWithProperties((cl_context)env-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref>,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*device,<sp/>0,<sp/>&amp;err);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>command<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1acaebd487623f5184afaa8cc9e1484298" kindref="member">device</ref><sp/>=<sp/>*device;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>env<sp/>-&gt;<ref refid="dd/d9f/structdp__env_1ad16df897c31528dfccd1e06df349634d" kindref="member">dump_fn</ref><sp/>=<sp/>dump_device_info;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref><sp/>==<sp/>support_int64_atomics(device))<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1a35e7de8a20748ae145861aa568b31f5e" kindref="member">support_int64_atomics</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1a35e7de8a20748ae145861aa568b31f5e" kindref="member">support_int64_atomics</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref><sp/>==<sp/>support_float64_atomics(device))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1ad13ac6ec1f1d52e3787b5e2e4a607096" kindref="member">support_float64_atomics</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;<ref refid="dd/d9f/structdp__env_1ad13ac6ec1f1d52e3787b5e2e4a607096" kindref="member">support_float64_atomics</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>free(device);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>*env_t_ptr<sp/>=<sp/>env;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>free(env);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>*env_t_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destroy_dp_env_t<sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>*env_t_ptr)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(*env_t_ptr);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseCommandQueue((cl_command_queue)(*env_t_ptr)-&gt;queue);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>release<sp/>command<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseDevice((cl_device_id)(*env_t_ptr)-&gt;device);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>release<sp/>device.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseContext((cl_context)(*env_t_ptr)-&gt;context);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>release<sp/>context.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*env_t_ptr);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_runtime_t_obj<sp/>(<ref refid="d5/d48/structdp__runtime" kindref="compound">runtime_t</ref><sp/>rt)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>status;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_platform_id<sp/>*platforms;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>check_runtime_id(rt);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>count<sp/>of<sp/>available<sp/>platforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>clGetPlatformIDs(0,<sp/>NULL,<sp/>&amp;(rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref>));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(status,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>platform<sp/>count.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>OpenCL<sp/>platforms<sp/>found.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>platforms<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a5d5bb42519c837eea086b15bf13d2506" kindref="member">platform_ids</ref><sp/>=<sp/>(cl_platform_id*)malloc(</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cl_platform_id)*rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(cl_platform_id,<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a5d5bb42519c837eea086b15bf13d2506" kindref="member">platform_ids</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>platforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>clGetPlatformIDs(rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref>,<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a5d5bb42519c837eea086b15bf13d2506" kindref="member">platform_ids</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(status,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>platform<sp/>ids&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>rt-&gt;platforms<sp/>to<sp/>a<sp/>pointer<sp/>of<sp/>type<sp/>cl_platform_id,<sp/>as<sp/>we<sp/>cannot<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>arithmetic<sp/>on<sp/>void*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>platforms<sp/>=<sp/>(cl_platform_id*)rt-&gt;<ref refid="d5/d48/structdp__runtime_1a5d5bb42519c837eea086b15bf13d2506" kindref="member">platform_ids</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>first<sp/>cpu<sp/>device<sp/>on<sp/>this<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>create_dp_env_t(platforms,<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref>,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CL_DEVICE_TYPE_CPU,<sp/>&amp;rt-&gt;<ref refid="d5/d48/structdp__runtime_1aeb6b605ee9b414e5f7c259b6ffd66f5c" kindref="member">first_cpu_env</ref>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd4319a31c44e42c4af13bba8e1eff4f" kindref="member">has_cpu</ref><sp/>=<sp/>!ret;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd4319a31c44e42c4af13bba8e1eff4f" kindref="member">has_cpu</ref>)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CPU<sp/>device<sp/>acquired...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>No<sp/>CPU<sp/>available<sp/>on<sp/>the<sp/>system\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>first<sp/>gpu<sp/>device<sp/>on<sp/>this<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>create_dp_env_t(platforms,<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref>,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CL_DEVICE_TYPE_GPU,<sp/>&amp;rt-&gt;<ref refid="d5/d48/structdp__runtime_1a9350509521cb7b03ca792756c2628906" kindref="member">first_gpu_env</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a4840f2fe8f593e71ee6c3bb44d0ec3ff" kindref="member">has_gpu</ref><sp/>=<sp/>!ret;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rt-&gt;<ref refid="d5/d48/structdp__runtime_1a4840f2fe8f593e71ee6c3bb44d0ec3ff" kindref="member">has_gpu</ref>)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>GPU<sp/>device<sp/>acquired...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>No<sp/>GPU<sp/>available<sp/>on<sp/>the<sp/>system.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rt-&gt;<ref refid="d5/d48/structdp__runtime_1a4840f2fe8f593e71ee6c3bb44d0ec3ff" kindref="member">has_gpu</ref>)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a838f0560d243cb2bc828c053c1e87f71" kindref="member">curr_env</ref><sp/>=<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a9350509521cb7b03ca792756c2628906" kindref="member">first_gpu_env</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rt-&gt;<ref refid="d5/d48/structdp__runtime_1abd4319a31c44e42c4af13bba8e1eff4f" kindref="member">has_cpu</ref>)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a838f0560d243cb2bc828c053c1e87f71" kindref="member">curr_env</ref><sp/>=<sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1aeb6b605ee9b414e5f7c259b6ffd66f5c" kindref="member">first_cpu_env</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>free(rt-&gt;<ref refid="d5/d48/structdp__runtime_1a5d5bb42519c837eea086b15bf13d2506" kindref="member">platform_ids</ref>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">/*--------------------------<sp/>End<sp/>of<sp/>private<sp/>helpers<sp/>--------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="db/de2/dppl__opencl__interface_8c_1af65969c48ec4f4c39acbfa713457dcda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1af65969c48ec4f4c39acbfa713457dcda" kindref="member">set_curr_env</ref><sp/>(<ref refid="d5/d48/structdp__runtime" kindref="compound">runtime_t</ref><sp/>rt,<sp/><ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env)</highlight></codeline>
<codeline lineno="505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(env<sp/>&amp;&amp;<sp/>rt)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt-&gt;<ref refid="d5/d48/structdp__runtime_1a838f0560d243cb2bc828c053c1e87f71" kindref="member">curr_env</ref><sp/>=<sp/>env;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="db/de2/dppl__opencl__interface_8c_1aa8cc64501aa87250c4a49fcaec2fb0b2" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1aa8cc64501aa87250c4a49fcaec2fb0b2" kindref="member">create_dp_runtime</ref><sp/>(<ref refid="d5/d48/structdp__runtime" kindref="compound">runtime_t</ref><sp/>*rt)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d48/structdp__runtime" kindref="compound">runtime_t</ref><sp/>rtobj;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>rtobj<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>new<sp/>struct<sp/>dp_runtime<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>rtobj<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a02fe9218ba15ed9a5addc7b692d4b8f5" kindref="member">runtime_t</ref>)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="d5/d48/structdp__runtime" kindref="compound">dp_runtime</ref>));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(<ref refid="d5/d48/structdp__runtime" kindref="compound">runtime_t</ref>,<sp/>rt);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>rtobj-&gt;<ref refid="d5/d48/structdp__runtime_1ad785d329557ebd7b6e307e2811a8d60c" kindref="member">id_</ref><sp/>=<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1aa07449fd5913461a429c7617af12b31c" kindref="member">RUNTIME_ID</ref>;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>rtobj-&gt;<ref refid="d5/d48/structdp__runtime_1abd0a6f9fdd977dd64bd0a7ca14dd4147" kindref="member">num_platforms</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>rtobj-&gt;<ref refid="d5/d48/structdp__runtime_1a5d5bb42519c837eea086b15bf13d2506" kindref="member">platform_ids</ref><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>init_runtime_t_obj(rtobj);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a3d05d4ff53571d917db5a64a5afe5ac5" kindref="member">CHECK_DPGLUE_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>initialize<sp/>runtime<sp/>object.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>rtobj-&gt;<ref refid="d5/d48/structdp__runtime_1a145de3ba28054f9f29bdb8c955ff9f66" kindref="member">dump_fn</ref><sp/>=<sp/>dump_dp_runtime_info;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>*rt<sp/>=<sp/>rtobj;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>Created<sp/>an<sp/>new<sp/>dp_runtime<sp/>object\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>free(rtobj);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="db/de2/dppl__opencl__interface_8c_1ae35d77471215c8e2ab7dd09f07e21eea" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1ae35d77471215c8e2ab7dd09f07e21eea" kindref="member">destroy_dp_runtime</ref><sp/>(<ref refid="d5/d48/structdp__runtime" kindref="compound">runtime_t</ref><sp/>*rt)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>check_runtime_id(*rt);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>Going<sp/>to<sp/>destroy<sp/>the<sp/>dp_runtime<sp/>object\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>first_cpu_device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*rt)-&gt;first_cpu_env)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>destroy_dp_env_t(&amp;(*rt)-&gt;first_cpu_env);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a3d05d4ff53571d917db5a64a5afe5ac5" kindref="member">CHECK_DPGLUE_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>destroy<sp/>first_cpu_device.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>first_gpu_device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*rt)-&gt;first_gpu_env)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>destroy_dp_env_t(&amp;(*rt)-&gt;first_gpu_env);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a3d05d4ff53571d917db5a64a5afe5ac5" kindref="member">CHECK_DPGLUE_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>destroy<sp/>first_gpu_device.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>platforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>free((cl_platform_id*)(*rt)-&gt;platform_ids);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>runtime_t<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*rt);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>Destroyed<sp/>the<sp/>new<sp/>dp_runtime<sp/>object\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="592" refid="db/de2/dppl__opencl__interface_8c_1a042f0d172f36953491338b4049dc740f" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a042f0d172f36953491338b4049dc740f" kindref="member">retain_dp_context</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_context<sp/>context;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>context<sp/>=<sp/>(cl_context)(env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainContext(context);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>when<sp/>calling<sp/>clRetainContext.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="612" refid="db/de2/dppl__opencl__interface_8c_1a1dff6cc96c6c5c712d2ed9a221919fa6" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a1dff6cc96c6c5c712d2ed9a221919fa6" kindref="member">release_dp_context</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_context<sp/>context;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>context<sp/>=<sp/>(cl_context)(env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseContext(context);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>when<sp/>calling<sp/>clRetainContext.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="db/de2/dppl__opencl__interface_8c_1a23a6c90c5ab9623c4a8c465bc84648eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a23a6c90c5ab9623c4a8c465bc84648eb" kindref="member">create_dp_rw_mem_buffer</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffsize,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d90/structdp__buffer" kindref="compound">buffer_t</ref><sp/>*buffer_t_ptr)</highlight></codeline>
<codeline lineno="632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d90/structdp__buffer" kindref="compound">buffer_t</ref><sp/>buff;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_context<sp/>context;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>buff<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>context<sp/>from<sp/>the<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>context<sp/>=<sp/>(cl_context)(env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainContext(context);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>retain<sp/>context.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>dp_buffer<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>buff<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a162ccb3cf5ba5fd158c0526cb59412c5" kindref="member">buffer_t</ref>)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="d3/d90/structdp__buffer" kindref="compound">dp_buffer</ref>));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(<ref refid="d3/d90/structdp__buffer" kindref="compound">buffer_t</ref>,<sp/>buffer_t_ptr);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>buff-&gt;<ref refid="d3/d90/structdp__buffer_1a67a8a4d388ab614577e22c233282b867" kindref="member">id_</ref><sp/>=<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a385688f3020e1ab2acf7a2e319b2129b" kindref="member">BUFFER_ID</ref>;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>OpenCL<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE<sp/>:<sp/>Copying<sp/>of<sp/>data<sp/>from<sp/>host<sp/>to<sp/>device<sp/>needs<sp/>to<sp/>happen<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>clEnqueue[Write|Read]Buffer.<sp/>This<sp/>would<sp/>change<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>buff-&gt;<ref refid="d3/d90/structdp__buffer_1a9f8fb7b35695dfb16b06ea5358dd4811" kindref="member">buffer_ptr</ref><sp/>=<sp/>clCreateBuffer(context,<sp/>CL_MEM_READ_WRITE,<sp/>buffsize,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>&amp;err);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>CL<sp/>buffer.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>buff-&gt;<ref refid="d3/d90/structdp__buffer_1a55d795a519be758db4697a384ceda73d" kindref="member">sizeof_buffer_ptr</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cl_mem);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>RW<sp/>buffer<sp/>created...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer_t_ptr<sp/>=<sp/>buff;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseContext(context);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>release<sp/>context.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>free(buff);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677" refid="db/de2/dppl__opencl__interface_8c_1af3c68c97b5f2334f97635c71edb0e586" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1af3c68c97b5f2334f97635c71edb0e586" kindref="member">destroy_dp_rw_mem_buffer</ref><sp/>(<ref refid="d3/d90/structdp__buffer" kindref="compound">buffer_t</ref><sp/>*buff)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>check_buffer_id(*buff);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseMemObject((cl_mem)(*buff)-&gt;buffer_ptr);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>release<sp/>CL<sp/>buffer.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*buff);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>buffer<sp/>destroyed...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="db/de2/dppl__opencl__interface_8c_1a0afb574a98ff37f7398873d66d05d953" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a0afb574a98ff37f7398873d66d05d953" kindref="member">write_dp_mem_buffer_to_device</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d90/structdp__buffer" kindref="compound">buffer_t</ref><sp/>buffer_t_ptr,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blocking,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize,</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data_ptr)</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_command_queue<sp/>queue;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_mem<sp/>mem;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>check_buffer_id(buffer_t_ptr);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>queue<sp/>=<sp/>(cl_command_queue)env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1ad5a7563e4b9b8d43286b970e440e0725" kindref="member">queue</ref>;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>(cl_mem)buffer_t_ptr-&gt;<ref refid="d3/d90/structdp__buffer_1a9f8fb7b35695dfb16b06ea5358dd4811" kindref="member">buffer_ptr</ref>;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mem<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;buffer<sp/>memory<sp/>is<sp/>NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainMemObject(mem);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>retain<sp/>the<sp/>command<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainCommandQueue(queue);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>retain<sp/>the<sp/>buffer<sp/>memory<sp/>object.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>using<sp/>any<sp/>events<sp/>for<sp/>the<sp/>time<sp/>being.<sp/>Eventually<sp/>we<sp/>want<sp/>to<sp/>figure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>the<sp/>event<sp/>dependencies<sp/>using<sp/>parfor<sp/>analysis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clEnqueueWriteBuffer(queue,<sp/>mem,<sp/>blocking?CL_TRUE:CL_FALSE,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,<sp/>buffersize,<sp/>data_ptr,<sp/>0,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>CL<sp/>buffer.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseCommandQueue(queue);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>release<sp/>the<sp/>command<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseMemObject(mem);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>release<sp/>the<sp/>buffer<sp/>memory<sp/>object.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>buffer<sp/>written<sp/>to<sp/>device...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//---<sp/>TODO:<sp/>Implement<sp/>a<sp/>version<sp/>that<sp/>uses<sp/>clEnqueueMapBuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="741"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="db/de2/dppl__opencl__interface_8c_1aef01861e0900d1291ab23b09beaa52e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1aef01861e0900d1291ab23b09beaa52e2" kindref="member">read_dp_mem_buffer_from_device</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d90/structdp__buffer" kindref="compound">buffer_t</ref><sp/>buffer_t_ptr,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blocking,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data_ptr)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_command_queue<sp/>queue;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_mem<sp/>mem;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>check_buffer_id(buffer_t_ptr);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>queue<sp/>=<sp/>(cl_command_queue)env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1ad5a7563e4b9b8d43286b970e440e0725" kindref="member">queue</ref>;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>(cl_mem)buffer_t_ptr-&gt;<ref refid="d3/d90/structdp__buffer_1a9f8fb7b35695dfb16b06ea5358dd4811" kindref="member">buffer_ptr</ref>;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainMemObject(mem);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>retain<sp/>the<sp/>command<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainCommandQueue(queue);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>retain<sp/>the<sp/>command<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>using<sp/>any<sp/>events<sp/>for<sp/>the<sp/>time<sp/>being.<sp/>Eventually<sp/>we<sp/>want<sp/>to<sp/>figure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>the<sp/>event<sp/>dependencies<sp/>using<sp/>parfor<sp/>analysis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clEnqueueReadBuffer(queue,<sp/>mem,<sp/>blocking?CL_TRUE:CL_FALSE,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,<sp/>buffersize,<sp/>data_ptr,<sp/>0,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>from<sp/>CL<sp/>buffer.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseCommandQueue(queue);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>release<sp/>the<sp/>command<sp/>queue.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseMemObject(mem);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>release<sp/>the<sp/>buffer<sp/>memory<sp/>object.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>buffer<sp/>read<sp/>from<sp/>device...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//---<sp/>TODO:<sp/>Implement<sp/>a<sp/>version<sp/>that<sp/>uses<sp/>clEnqueueMapBuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791" refid="db/de2/dppl__opencl__interface_8c_1ab1a000f75915669913b4de99edbea1ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1ab1a000f75915669913b4de99edbea1ab" kindref="member">create_dp_program_from_spirv</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*il,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d21/structdp__program" kindref="compound">program_t</ref><sp/>*program_t_ptr)</highlight></codeline>
<codeline lineno="795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_context<sp/>context;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d21/structdp__program" kindref="compound">program_t</ref><sp/>prog;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DUMP_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*write_file;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>prog<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DUMP_SPIRV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>write_file<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;latest.spirv&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(il,length,1,write_file);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(write_file);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>prog<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1afad71e6b9f69f779865c7b36fdab8695" kindref="member">program_t</ref>)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="da/d21/structdp__program" kindref="compound">dp_program</ref>));</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(<ref refid="da/d21/structdp__program" kindref="compound">program_t</ref>,<sp/>program_t_ptr);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>prog-&gt;<ref refid="da/d21/structdp__program_1a25795513ea0cde7c0716dede44c65c73" kindref="member">id_</ref><sp/>=<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a9cf8e26bf4dfe819f195c5709d9a87cc" kindref="member">PROGRAM_ID</ref>;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>context<sp/>=<sp/>(cl_context)env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref>;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainContext(context);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>retain<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>program<sp/>with<sp/>a<sp/>SPIR-V<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>prog-&gt;<ref refid="da/d21/structdp__program_1a53c11334b6b4bc028b22febb7780bad2" kindref="member">program</ref><sp/>=<sp/>clCreateProgramWithIL(context,<sp/>il,<sp/>length,<sp/>&amp;err);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>program<sp/>with<sp/>IL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>program<sp/>created<sp/>from<sp/>spirv<sp/>of<sp/>length<sp/>%zu...\n&quot;</highlight><highlight class="normal">,<sp/>length);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>*program_t_ptr<sp/>=<sp/>prog;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseContext(context);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>release<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="838"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>free(prog);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844" refid="db/de2/dppl__opencl__interface_8c_1a43b3debedd923d396376be492fbc02d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a43b3debedd923d396376be492fbc02d1" kindref="member">create_dp_program_from_source</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**strings,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*lengths,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d21/structdp__program" kindref="compound">program_t</ref><sp/>*program_t_ptr)</highlight></codeline>
<codeline lineno="849"><highlight class="normal">{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_context<sp/>context;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d21/structdp__program" kindref="compound">program_t</ref><sp/>prog;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>prog<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>prog<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1afad71e6b9f69f779865c7b36fdab8695" kindref="member">program_t</ref>)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="da/d21/structdp__program" kindref="compound">dp_program</ref>));</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(<ref refid="da/d21/structdp__program" kindref="compound">program_t</ref>,<sp/>program_t_ptr);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>prog-&gt;<ref refid="da/d21/structdp__program_1a25795513ea0cde7c0716dede44c65c73" kindref="member">id_</ref><sp/>=<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a9cf8e26bf4dfe819f195c5709d9a87cc" kindref="member">PROGRAM_ID</ref>;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>context<sp/>=<sp/>(cl_context)env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref>;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainContext(context);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>retain<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>program<sp/>with<sp/>string<sp/>source<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>prog-&gt;<ref refid="da/d21/structdp__program_1a53c11334b6b4bc028b22febb7780bad2" kindref="member">program</ref><sp/>=<sp/>clCreateProgramWithSource(context,<sp/>count,<sp/>strings,</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lengths,<sp/>&amp;err);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>program<sp/>with<sp/>source&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>program<sp/>created<sp/>from<sp/>source...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>*program_t_ptr<sp/>=<sp/>prog;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseContext(context);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>release<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="883"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>free(prog);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889" refid="db/de2/dppl__opencl__interface_8c_1afc1c8661c40ec9b1f64e11d93909926d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1afc1c8661c40ec9b1f64e11d93909926d" kindref="member">destroy_dp_program</ref><sp/>(<ref refid="da/d21/structdp__program" kindref="compound">program_t</ref><sp/>*program_ptr)</highlight></codeline>
<codeline lineno="890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>check_program_id(*program_ptr);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseProgram((cl_program)(*program_ptr)-&gt;program);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>release<sp/>CL<sp/>program.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*program_ptr);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>program<sp/>destroyed...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="db/de2/dppl__opencl__interface_8c_1a4128360b3dff32134797e6ca01cc5c7c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a4128360b3dff32134797e6ca01cc5c7c" kindref="member">build_dp_program</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,<sp/><ref refid="da/d21/structdp__program" kindref="compound">program_t</ref><sp/>program_t_ptr)</highlight></codeline>
<codeline lineno="911"><highlight class="normal">{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_device_id<sp/>device;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>check_program_id(program_t_ptr);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>device<sp/>=<sp/>(cl_device_id)env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1acaebd487623f5184afaa8cc9e1484298" kindref="member">device</ref>;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainDevice(device);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>retain<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>(compile)<sp/>the<sp/>program<sp/>for<sp/>the<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clBuildProgram((cl_program)program_t_ptr-&gt;<ref refid="da/d21/structdp__program_1a53c11334b6b4bc028b22febb7780bad2" kindref="member">program</ref>,<sp/>1,<sp/>&amp;device,<sp/>NULL,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>build<sp/>program&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>program<sp/>successfully<sp/>built.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseDevice(device);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>release<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="941" refid="db/de2/dppl__opencl__interface_8c_1a76f1199c6a0b3b1f3301f4346ddb941f" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a76f1199c6a0b3b1f3301f4346ddb941f" kindref="member">create_dp_kernel</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d21/structdp__program" kindref="compound">program_t</ref><sp/>program_t_ptr,</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kernel_name,</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d41/structdp__kernel" kindref="compound">kernel_t</ref><sp/>*kernel_ptr)</highlight></codeline>
<codeline lineno="945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_context<sp/>context;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d41/structdp__kernel" kindref="compound">kernel_t</ref><sp/>ker;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>ker<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>ker<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1a4032a461689a915b743ca9d075ad8570" kindref="member">kernel_t</ref>)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="d1/d41/structdp__kernel" kindref="compound">dp_kernel</ref>));</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(<ref refid="d1/d41/structdp__kernel" kindref="compound">kernel_t</ref>,<sp/>kernel_ptr);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>ker-&gt;<ref refid="d1/d41/structdp__kernel_1a411402b06ff840a33a3aa1730c8074c8" kindref="member">id_</ref><sp/>=<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1ab53adb106bfbfc72bc0918855fccdb18" kindref="member">KERNEL_ID</ref>;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>context<sp/>=<sp/>(cl_context)(env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1a71fcd31fd9bea81c7e617eea47a3ba3c" kindref="member">context</ref>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clRetainContext(context);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>retain<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>ker-&gt;<ref refid="d1/d41/structdp__kernel_1a95dd37c1dba4059dd0a0a1af03a5d594" kindref="member">kernel</ref><sp/>=<sp/>clCreateKernel((cl_program)(program_t_ptr-&gt;<ref refid="da/d21/structdp__program_1a53c11334b6b4bc028b22febb7780bad2" kindref="member">program</ref>),</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel_name,<sp/>&amp;err);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>kernel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseContext(context);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>release<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>kernel<sp/>created\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>ker-&gt;<ref refid="d1/d41/structdp__kernel_1a5cc090097153e6109e216591700507d9" kindref="member">dump_fn</ref><sp/>=<sp/>dump_dp_kernel_info;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>*kernel_ptr<sp/>=<sp/>ker;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="975"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ker);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="db/de2/dppl__opencl__interface_8c_1ad208cdc7cf60e150f128ae54e3073216" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1ad208cdc7cf60e150f128ae54e3073216" kindref="member">destroy_dp_kernel</ref><sp/>(<ref refid="d1/d41/structdp__kernel" kindref="compound">kernel_t</ref><sp/>*kernel_ptr)</highlight></codeline>
<codeline lineno="982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>check_kernel_id(*kernel_ptr);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clReleaseKernel((cl_kernel)(*kernel_ptr)-&gt;kernel);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>release<sp/>CL<sp/>kernel.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*kernel_ptr);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>kernel<sp/>destroyed...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005" refid="db/de2/dppl__opencl__interface_8c_1a7659b305f3780aa0858c919b6baf4fa8" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a7659b305f3780aa0858c919b6baf4fa8" kindref="member">create_dp_kernel_arg</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_value,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arg_size,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*kernel_arg_t_ptr)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>kernel_arg;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel_arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel_arg<sp/>=<sp/>(<ref refid="d0/da0/dppl__opencl__interface_8h_1ad6b9cfe3b0fec6fcd179adf2ed2fa12f" kindref="member">kernel_arg_t</ref>)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="d1/df7/structdp__kernel__arg" kindref="compound">dp_kernel_arg</ref>));</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(<ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref>,<sp/>kernel_arg);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel_arg-&gt;<ref refid="d1/df7/structdp__kernel__arg_1a367c05865e2577a77cbd98712929aab0" kindref="member">id_</ref><sp/>=<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a5acec311e79957cffc6bbea180ddfe7f" kindref="member">KERNELARG_ID</ref>;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel_arg-&gt;<ref refid="d1/df7/structdp__kernel__arg_1a5c1abe8db03d1d824331fcffeb8b7322" kindref="member">arg_size</ref><sp/>=<sp/>arg_size;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel_arg-&gt;<ref refid="d1/df7/structdp__kernel__arg_1aabfbf93d5c3a937f21ee5220bc202057" kindref="member">arg_value</ref><sp/>=<sp/>arg_value;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>Kernel<sp/>arg<sp/>created\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>void<sp/>**tp<sp/>=<sp/>(void**)kernel_arg-&gt;arg_value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;DEBUG:<sp/>create_kernel_arg<sp/>%p<sp/>(size<sp/>%ld,<sp/>addr<sp/>%p)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel_arg,<sp/>kernel_arg-&gt;arg_size,<sp/>*tp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>*kernel_arg_t_ptr<sp/>=<sp/>kernel_arg;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037" refid="db/de2/dppl__opencl__interface_8c_1ac57c05f82c1675fd6cc62c397d33fc77" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1ac57c05f82c1675fd6cc62c397d33fc77" kindref="member">create_dp_kernel_arg_from_buffer</ref><sp/>(<ref refid="d3/d90/structdp__buffer" kindref="compound">buffer_t</ref><sp/>*buffer_t_ptr,</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*kernel_arg_t_ptr)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>check_buffer_id(*buffer_t_ptr);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a7659b305f3780aa0858c919b6baf4fa8" kindref="member">create_dp_kernel_arg</ref>(&amp;((*buffer_t_ptr)-&gt;buffer_ptr),</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*buffer_t_ptr)-&gt;sizeof_buffer_ptr,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel_arg_t_ptr);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051" refid="db/de2/dppl__opencl__interface_8c_1a907bd92804f632a6188250d45b0a245f" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a907bd92804f632a6188250d45b0a245f" kindref="member">destroy_dp_kernel_arg</ref><sp/>(<ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*kernel_arg_t_ptr)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*kernel_arg_t_ptr);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>Kernel<sp/>arg<sp/>destroyed...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066" refid="db/de2/dppl__opencl__interface_8c_1abf6adff83e785bc3de2deb4fb34a8ec4" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1abf6adff83e785bc3de2deb4fb34a8ec4" kindref="member">set_args_and_enqueue_dp_kernel</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d41/structdp__kernel" kindref="compound">kernel_t</ref><sp/>kernel_t_ptr,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nargs,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*array_of_args,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>work_dim,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*global_work_offset,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*global_work_size,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*local_work_size)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_int<sp/>err;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_kernel<sp/>kernel;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>cl_command_queue<sp/>queue;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>check_env_id(env_t_ptr);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>check_kernel_id(kernel_t_ptr);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel<sp/>=<sp/>(cl_kernel)kernel_t_ptr-&gt;<ref refid="d1/d41/structdp__kernel_1a95dd37c1dba4059dd0a0a1af03a5d594" kindref="member">kernel</ref>;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>queue<sp/>=<sp/>(cl_command_queue)env_t_ptr-&gt;<ref refid="dd/d9f/structdp__env_1ad5a7563e4b9b8d43286b970e440e0725" kindref="member">queue</ref>;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel_t_ptr-&gt;<ref refid="d1/d41/structdp__kernel_1a5cc090097153e6109e216591700507d9" kindref="member">dump_fn</ref>(kernel_t_ptr);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>kernel<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nargs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>clSetKernelArgs<sp/>for<sp/>arg<sp/>#<sp/>%zu\n&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>this_arg<sp/>=<sp/>array_of_args[i];</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_kernelarg_id(this_arg);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**tp<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)this_arg-&gt;<ref refid="d1/df7/structdp__kernel__arg_1aabfbf93d5c3a937f21ee5220bc202057" kindref="member">arg_value</ref>;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>clSetKernelArgs<sp/>for<sp/>arg<sp/>#<sp/>%zu<sp/>(size<sp/>%zu,<sp/>addr<sp/>%p)\n&quot;</highlight><highlight class="normal">,<sp/>i,</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_arg-&gt;<ref refid="d1/df7/structdp__kernel__arg_1a5c1abe8db03d1d824331fcffeb8b7322" kindref="member">arg_size</ref>,<sp/>*tp);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clSetKernelArg(kernel,<sp/>i,<sp/>this_arg-&gt;<ref refid="d1/df7/structdp__kernel__arg_1a5c1abe8db03d1d824331fcffeb8b7322" kindref="member">arg_size</ref>,</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this_arg-&gt;<ref refid="d1/df7/structdp__kernel__arg_1aabfbf93d5c3a937f21ee5220bc202057" kindref="member">arg_value</ref>);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>set<sp/>arguments<sp/>to<sp/>the<sp/>kernel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>kernel.<sp/>Not<sp/>using<sp/>events<sp/>for<sp/>the<sp/>time<sp/>being.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clEnqueueNDRangeKernel(queue,<sp/>kernel,<sp/>work_dim,<sp/>global_work_offset,</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_work_size,<sp/>local_work_size,<sp/>0,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>enqueue<sp/>the<sp/>kernel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>clFinish(queue);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1a5c5d67855b5c14a46bc1c285188ddcc1" kindref="member">CHECK_OPEN_CL_ERROR</ref>(err,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>while<sp/>waiting<sp/>for<sp/>queue<sp/>to<sp/>finish&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DEBUG:<sp/>CL<sp/>Kernel<sp/>Finish...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" kindref="member">DP_GLUE_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127" refid="db/de2/dppl__opencl__interface_8c_1a7522e1967af436d88e8e8fec48dda403" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/de2/dppl__opencl__interface_8c_1a7522e1967af436d88e8e8fec48dda403" kindref="member">set_args_and_enqueue_dp_kernel_auto_blocking</ref><sp/>(<ref refid="dd/d9f/structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d41/structdp__kernel" kindref="compound">kernel_t</ref><sp/>kernel_t_ptr,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nargs,</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/df7/structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*args,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_dims,</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dim_starts,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dim_stops)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*global_work_size;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>size_t<sp/>*local_work_size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>global_work_size<sp/>=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>*<sp/>num_dims);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>local_work_size<sp/><sp/>=<sp/>(size_t*)malloc(sizeof(size_t)<sp/>*<sp/>num_dims);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dcd/error__check__macros_8h_1ac8b9ca6f31ac89dbfb2a35dd4cb7d24a" kindref="member">CHECK_MALLOC_ERROR</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/>global_work_size);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>CHECK_MALLOC_ERROR(size_t,<sp/>local_work_size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(num_dims<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>num_dims<sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_dims;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_work_size[i]<sp/>=<sp/>dim_stops[i]<sp/>-<sp/>dim_starts[i]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="db/de2/dppl__opencl__interface_8c_1abf6adff83e785bc3de2deb4fb34a8ec4" kindref="member">set_args_and_enqueue_dp_kernel</ref>(env_t_ptr,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel_t_ptr,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nargs,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dims,</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_work_size,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>free(global_work_size);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>free(local_work_size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal">malloc_error:</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>free(global_work_size);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>free(local_work_size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/da0/dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" kindref="member">DP_GLUE_FAILURE</ref>;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_opencl_interface.c"/>
  </compounddef>
</doxygen>
