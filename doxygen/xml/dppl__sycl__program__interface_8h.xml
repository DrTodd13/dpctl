<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="dppl__sycl__program__interface_8h" kind="file" language="C++">
    <compoundname>dppl_sycl_program_interface.h</compoundname>
    <includes refid="dppl__data__types_8h" local="yes">dppl_data_types.h</includes>
    <includes refid="dppl__sycl__types_8h" local="yes">dppl_sycl_types.h</includes>
    <includes refid="DllExport_8h" local="yes">Support/DllExport.h</includes>
    <includes refid="ExternC_8h" local="yes">Support/ExternC.h</includes>
    <includes refid="MemOwnershipAttrs_8h" local="yes">Support/MemOwnershipAttrs.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>Support/DllExport.h</label>
        <link refid="DllExport_8h"/>
      </node>
      <node id="1">
        <label>backends/include/dppl_sycl_program_interface.h</label>
        <link refid="dppl__sycl__program__interface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/types.h</label>
      </node>
      <node id="2">
        <label>dppl_data_types.h</label>
        <link refid="dppl__data__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>dppl_sycl_types.h</label>
        <link refid="dppl__sycl__types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Support/ExternC.h</label>
        <link refid="ExternC_8h"/>
      </node>
      <node id="9">
        <label>Support/MemOwnershipAttrs.h</label>
        <link refid="MemOwnershipAttrs_8h"/>
      </node>
      <node id="3">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="dppl__sycl__program__interface_8h_1a73b021c98d0109b93e43b6e1eecd535f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref></type>
        <definition>DPPLSyclProgramRef DPPLProgram_CreateFromOCLSpirv</definition>
        <argsstring>(const DPPLSyclContextRef Ctx, const void *IL, size_t Length)</argsstring>
        <name>DPPLProgram_CreateFromOCLSpirv</name>
        <param>
          <type>const <ref refid="dppl__sycl__types_8h_1a6f7f076797eb7499ab2c6caffed6efcb" kindref="member">DPPLSyclContextRef</ref></type>
          <declname>Ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>IL</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
<para>Create a Sycl program from an OpenCL SPIR-V binary file. </para>
        </briefdescription>
        <detaileddescription>
<para>Sycl 1.2 does not expose any method to create a sycl::program from a SPIR-V IL file. To get around this limitation, we need to use the Sycl feature to create an interoperability kernel from an OpenCL kernel. This function first creates an OpenCL program and kernel from the SPIR-V binary and then using the Sycl-OpenCL interoperability feature creates a Sycl kernel from the OpenCL kernel.</para>
<para>The feature to create a Sycl kernel from a SPIR-V IL binary will be available in Sycl 2.0 at which point this function may become deprecated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a sycl::context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IL</parametername>
</parameternamelist>
<parameterdescription>
<para>SPIR-V binary </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new SyclProgramRef pointer if the program creation succeeded, else returns NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_sycl_program_interface.h" line="60" column="1" declfile="backends/include/dppl_sycl_program_interface.h" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dppl__sycl__program__interface_8h_1a1a4750b24487335ecaa1481d8cded60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref></type>
        <definition>DPPLSyclProgramRef DPPLProgram_CreateFromOCLSource</definition>
        <argsstring>(const DPPLSyclContextRef Ctx, const char *Source, const char *CompileOpts)</argsstring>
        <name>DPPLProgram_CreateFromOCLSource</name>
        <param>
          <type>const <ref refid="dppl__sycl__types_8h_1a6f7f076797eb7499ab2c6caffed6efcb" kindref="member">DPPLSyclContextRef</ref></type>
          <declname>Ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>CompileOpts</declname>
        </param>
        <briefdescription>
<para>Create a Sycl program from an OpenCL kernel source string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a sycl::context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Source</parametername>
</parameternamelist>
<parameterdescription>
<para>OpenCL source string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompileOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra compiler flags (refer Sycl spec.) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new SyclProgramRef pointer if the program creation succeeded, else returns NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_sycl_program_interface.h" line="75" column="1" declfile="backends/include/dppl_sycl_program_interface.h" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dppl__sycl__program__interface_8h_1af6204db8d350c05dd38ea72df53f3276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dppl__sycl__types_8h_1ac7590a7630c7ef3467d983c57e60b01f" kindref="member">DPPLSyclKernelRef</ref></type>
        <definition>DPPLSyclKernelRef DPPLProgram_GetKernel</definition>
        <argsstring>(DPPLSyclProgramRef PRef, const char *KernelName)</argsstring>
        <name>DPPLProgram_GetKernel</name>
        <param>
          <type><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>KernelName</declname>
        </param>
        <briefdescription>
<para>Returns the SyclKernel with given name from the program, if not found then return NULL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KernelName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SyclKernel reference if the kernel exists, else NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_sycl_program_interface.h" line="89" column="1" declfile="backends/include/dppl_sycl_program_interface.h" declline="89" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dppl__sycl__program__interface_8h_1a8d431de6777cac25c3b58e1921945984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DPPLProgram_HasKernel</definition>
        <argsstring>(DPPLSyclProgramRef PRef, const char *KernelName)</argsstring>
        <name>DPPLProgram_HasKernel</name>
        <param>
          <type><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>KernelName</declname>
        </param>
        <briefdescription>
<para>Return True if a SyclKernel with given name exists in the program, if not found then returns False. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KernelName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the kernel exists, else False </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_sycl_program_interface.h" line="102" column="1" declfile="backends/include/dppl_sycl_program_interface.h" declline="102" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dppl__sycl__program__interface_8h_1a54639690d0fc41e58a5e30d9a0824b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPPLProgram_Delete</definition>
        <argsstring>(DPPLSyclProgramRef PRef)</argsstring>
        <name>DPPLProgram_Delete</name>
        <param>
          <type><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <briefdescription>
<para>Frees the DPPLSyclProgramRef pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_sycl_program_interface.h" line="112" column="1" declfile="backends/include/dppl_sycl_program_interface.h" declline="112" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This header declares a C API to create Sycl program an interoperability program defined in OpenCL. In future, API to create interoperability kernels from other languages such as Level-0 driver API may be added here.</para>
<para><xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>Investigate what we should do when we add support for Level-0 API. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-----------<sp/>dppl_sycl_program_interface.h<sp/>-<sp/>dpctl-C_API<sp/>--*--C++<sp/>--*--===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>Parallel<sp/>Control<sp/>Library<sp/>(dpCtl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dppl__data__types_8h" kindref="compound">dppl_data_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dppl__sycl__types_8h" kindref="compound">dppl_sycl_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="DllExport_8h" kindref="compound">Support/DllExport.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ExternC_8h" kindref="compound">Support/ExternC.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MemOwnershipAttrs_8h" kindref="compound">Support/MemOwnershipAttrs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">DPPL_C_EXTERN_C_BEGIN</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref><sp/><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="dppl__sycl__program__interface_8h_1a73b021c98d0109b93e43b6e1eecd535f" kindref="member">DPPLProgram_CreateFromOCLSpirv</ref><sp/>(<ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dppl__sycl__types_8h_1a6f7f076797eb7499ab2c6caffed6efcb" kindref="member">DPPLSyclContextRef</ref><sp/>Ctx,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*IL,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref><sp/><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="dppl__sycl__program__interface_8h_1a1a4750b24487335ecaa1481d8cded60f" kindref="member">DPPLProgram_CreateFromOCLSource</ref><sp/>(<ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dppl__sycl__types_8h_1a6f7f076797eb7499ab2c6caffed6efcb" kindref="member">DPPLSyclContextRef</ref><sp/>Ctx,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*CompileOpts);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref><sp/><ref refid="dppl__sycl__types_8h_1ac7590a7630c7ef3467d983c57e60b01f" kindref="member">DPPLSyclKernelRef</ref></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="dppl__sycl__program__interface_8h_1af6204db8d350c05dd38ea72df53f3276" kindref="member">DPPLProgram_GetKernel</ref><sp/>(<ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref><sp/>PRef,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*KernelName);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="dppl__sycl__program__interface_8h_1a8d431de6777cac25c3b58e1921945984" kindref="member">DPPLProgram_HasKernel</ref><sp/>(<ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref><sp/>PRef,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*KernelName);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="dppl__sycl__program__interface_8h_1a54639690d0fc41e58a5e30d9a0824b7a" kindref="member">DPPLProgram_Delete</ref><sp/>(<ref refid="group__MEM__MGMT__ATTR__MACROS_1ga992ba513554faa4a42a193e0f31c4cb7" kindref="member">__dppl_take</ref><sp/><ref refid="dppl__sycl__types_8h_1a6351df09d08e539e332d1174a61e40ed" kindref="member">DPPLSyclProgramRef</ref><sp/>PRef);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">DPPL_C_EXTERN_C_END</highlight></codeline>
    </programlisting>
    <location file="backends/include/dppl_sycl_program_interface.h"/>
  </compounddef>
</doxygen>
