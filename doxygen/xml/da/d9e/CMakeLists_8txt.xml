<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="da/d9e/CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d9e/CMakeLists_8txt_1a6f878f291c546003618b45033d5cdcbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cmake_minimum_required</definition>
        <argsstring>(VERSION 3.3.2 FATAL_ERROR) project(&quot;Data-parallel Control (dpCtl)&quot;) function(check_for_dpcpp) string(COMPARE EQUAL &quot;$</argsstring>
        <name>cmake_minimum_required</name>
        <param>
          <type>VERSION 3.3.2</type>
          <declname>FATAL_ERROR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/CMakeLists.txt" line="1" column="1" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/CMakeLists.txt" bodystart="1" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d9e/CMakeLists_8txt_1a79010be137637b1fffdd9f3c0a926708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>no_dpcpp_root</type>
        <definition>no_dpcpp_root if</definition>
        <argsstring>(${no_dpcpp_root}) message(FATAL_ERROR &quot;Set the DPCPP_ROOT argument providing the path to \ a dpcpp installation.&quot;) endif() if(WIN32) set(dpcpp_cmd &quot;$</argsstring>
        <name>if</name>
        <param>
          <declname>${no_dpcpp_root}</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/CMakeLists.txt" line="7" column="5" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/CMakeLists.txt" bodystart="7" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="da/d9e/CMakeLists_8txt_1a3c08e61ce0afb3c3b27b9856b061109b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bin dpcpp</type>
        <definition>bin dpcpp set</definition>
        <argsstring>(dpcpp_arg &quot;--version&quot;) elseif(UNIX) set(dpcpp_cmd &quot;dpcpp&quot;) set(dpcpp_arg &quot;--version&quot;) else() message(FATAL_ERROR &quot;Unsupported system.&quot;) endif() execute_process(COMMAND $</argsstring>
        <name>set</name>
        <param>
          <type>dpcpp_arg &quot;--version&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/CMakeLists.txt" line="14" column="9" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/CMakeLists.txt" bodystart="14" bodyend="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"><ref refid="da/d9e/CMakeLists_8txt_1a6f878f291c546003618b45033d5cdcbb" kindref="member">cmake_minimum_required</ref>(VERSION<sp/>3.3.2<sp/>FATAL_ERROR)</highlight></codeline>
<codeline lineno="2"><highlight class="normal">project(</highlight><highlight class="stringliteral">&quot;Data-parallel<sp/>Control<sp/>(dpCtl)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>The<sp/>function<sp/>checks<sp/>is<sp/>DPCPP_ROOT<sp/>is<sp/>valid<sp/>and<sp/>points<sp/>to<sp/>a<sp/>dpcpp<sp/>installation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(check_for_dpcpp)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(COMPARE<sp/>EQUAL<sp/></highlight><highlight class="stringliteral">&quot;${DPCPP_ROOT}&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>no_dpcpp_root)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(${no_dpcpp_root})</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>the<sp/>DPCPP_ROOT<sp/>argument<sp/>providing<sp/>the<sp/>path<sp/>to<sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>dpcpp<sp/>installation.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>endif()</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d9e/CMakeLists_8txt_1a79010be137637b1fffdd9f3c0a926708" kindref="member">if</ref>(WIN32)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d9e/CMakeLists_8txt_1a3c08e61ce0afb3c3b27b9856b061109b" kindref="member">set</ref><sp/>(dpcpp_cmd<sp/>&quot;${DPCPP_ROOT}/bin/dpcpp</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>(dpcpp_arg<sp/>&quot;</highlight><highlight class="normal">--version</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>elseif(UNIX)</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>(dpcpp_cmd<sp/>&quot;</highlight><highlight class="normal">dpcpp</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>(dpcpp_arg<sp/>&quot;</highlight><highlight class="normal">--version</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else()</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/>&quot;</highlight><highlight class="normal">Unsupported<sp/>system.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>endif()</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>Check<sp/>if<sp/>dpcpp<sp/>is<sp/>available</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>execute_process(</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMMAND<sp/>${dpcpp_cmd}<sp/>${dpcpp_arg}</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WORKING_DIRECTORY<sp/>${PROJECT_SOURCE_DIR}</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RESULT_VARIABLE<sp/>dpcpp_result</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OUTPUT_VARIABLE<sp/>dpcpp_ver</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(${dpcpp_result}<sp/>MATCHES<sp/>&quot;</highlight><highlight class="normal">0</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string(REPLACE<sp/>&quot;</highlight><highlight class="normal">\n</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight><highlight class="stringliteral">&quot;<sp/>DPCPP_VERSION_LIST<sp/>&quot;</highlight><highlight class="normal">${dpcpp_ver}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list(GET<sp/>DPCPP_VERSION_LIST<sp/>0<sp/>dpcpp_ver_line)</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreach(X<sp/>${DPCPP_VERSION_LIST})</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">dpcpp<sp/>ver[${dpcpp_result}]:<sp/>${X}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endforeach()</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else()</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/>&quot;</highlight><highlight class="normal">DPCPP<sp/>needed<sp/>to<sp/>build<sp/>dppl_sycl_interface</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>endif()</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">endfunction()</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">function<sp/>(check_for_numpy_inc)</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>string(COMPARE<sp/>EQUAL<sp/>&quot;</highlight><highlight class="normal">${NUMPY_INCLUDE_DIR}</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="stringliteral">&quot;<sp/>no_numpy_inc)</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(${no_dpcpp_root})</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/>&quot;</highlight><highlight class="normal">Set<sp/>the<sp/>NUMPY_INCLUDE_DIR<sp/>argument<sp/>providing<sp/>the<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>to<sp/>NumPy<sp/>Headers.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else()</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">NUMPY_INCLUDE_DIR:<sp/>${NUMPY_INCLUDE_DIR}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>endif()</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>string(COMPARE<sp/>EQUAL<sp/>&quot;</highlight><highlight class="normal">${PYTHON_INCLUDE_DIR}</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="stringliteral">&quot;<sp/>no_python_inc)</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(${no_dpcpp_root})</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/>&quot;</highlight><highlight class="normal">Set<sp/>the<sp/>PYTHON_INCLUDE_DIR<sp/>argument<sp/>providing<sp/>the<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>to<sp/>Python<sp/>Headers.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else()</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">PYTHON_INCLUDE_DIR:<sp/>${PYTHON_INCLUDE_DIR}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>endif()</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral">endfunction()</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral">#<sp/>Check<sp/>for<sp/>dpcpp<sp/>in<sp/>the<sp/>specified<sp/>DPCPP_ROOT</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral">check_for_dpcpp()</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral">#<sp/>Check<sp/>if<sp/>the<sp/>locations<sp/>of<sp/>Numpy<sp/>and<sp/>Python<sp/>headers<sp/>were<sp/>provided</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral">check_for_numpy_inc()</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral">if(WIN32)</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_CXX_COMPILER:PATH<sp/>&quot;</highlight><highlight class="normal">${DPCPP_ROOT}/bin/dpcpp</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_C_COMPILER:PATH<sp/>&quot;</highlight><highlight class="normal">${DPCPP_ROOT}/bin/clang-cl</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_LINKER:PATH<sp/>&quot;</highlight><highlight class="normal">${DPCPP_ROOT}/bin/lld-link</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">Resetting<sp/>CXX<sp/>compiler<sp/>to:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>${CMAKE_CXX_COMPILER})</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">Resetting<sp/>C<sp/>compiler<sp/>to:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>${CMAKE_C_COMPILER})</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">Resetting<sp/>Linker<sp/>to:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>${CMAKE_LINK})</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_C_FLAGS<sp/>&quot;</highlight><highlight class="normal">${CMAKE_C_FLAGS}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-Wall<sp/>-Wextra<sp/>-Winit-</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>-Wuninitialized<sp/>-Wmissing-declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-fdiagnostics-color=</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>-O3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_CXX_FLAGS<sp/>&quot;</highlight><highlight class="normal">${CMAKE_CXX_FLAGS}<sp/>-Qstd=c++17</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_C_FLAGS_DEBUG<sp/>&quot;</highlight><highlight class="normal">${CMAKE_C_FLAGS_DEBUG}<sp/>-ggdb3<sp/>-DDEBUG<sp/></highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral">elseif(UNIX)</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_C_FLAGS<sp/>&quot;</highlight><highlight class="normal">${CMAKE_C_FLAGS}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-Wall<sp/>-Wextra<sp/>-Winit-</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>-Wuninitialized<sp/>-Wmissing-declarations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-fdiagnostics-color=</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>-O3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_C_FLAGS_DEBUG<sp/>&quot;</highlight><highlight class="normal">${CMAKE_C_FLAGS_DEBUG}<sp/>-ggdb3<sp/>-DDEBUG<sp/></highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_CXX_FLAGS<sp/>&quot;</highlight><highlight class="normal">${CMAKE_CXX_FLAGS}<sp/>-std=c++17<sp/>-fsycl</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral">else()</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/>&quot;</highlight><highlight class="normal">Unsupported<sp/>system.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral">endif()</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral">set(OpenCL_INCLUDE_DIR<sp/>&quot;</highlight><highlight class="normal">${DPCPP_ROOT}/include/sycl</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral">set(OpenCL_LIBRARY<sp/>&quot;</highlight><highlight class="normal">${DPCPP_ROOT}/lib/libOpenCL.so</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal">OpenCL_INCLUDE_DIR:<sp/>${OpenCL_INCLUDE_DIR}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal">OpenCL_LIBRARY:<sp/>${OpenCL_LIBRARY}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral">add_library(</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/>DPPLSyclInterface</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/>SHARED</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_context_interface.cpp</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_device_interface.cpp</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_event_interface.cpp</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_kernel_interface.cpp</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_platform_interface.cpp</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_program_interface.cpp</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_queue_interface.cpp</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_queue_manager.cpp</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/>source/dppl_sycl_usm_interface.cpp</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/>source/dppl_utils.cpp</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral">#<sp/>Install<sp/>DPPLOpenCLInterface</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral">add_library(</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DPPLOpenCLInterface</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>SHARED</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>source/dppl_opencl_interface.c</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral">#<sp/>Install<sp/>DPPLSyclInterface</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral">target_include_directories(</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DPPLSyclInterface</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PUBLIC</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/include/</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral">target_include_directories(</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DPPLOpenCLInterface</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PUBLIC</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/include/</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral">target_include_directories(</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DPPLOpenCLInterface</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PUBLIC</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>${OpenCL_INCLUDE_DIR}</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral">if(WIN32)</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STATUS</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">SYCL_INCLUDE_DIR:<sp/></highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${DPCPP_ROOT}/include/sycl</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>target_include_directories(</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DPPLSyclInterface</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PUBLIC</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${DPCPP_ROOT}/include/sycl</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>target_link_libraries(</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DPPLSyclInterface</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE<sp/>${DPCPP_ROOT}/lib/sycl.lib</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE<sp/>${DPCPP_ROOT}/lib/OpenCL.lib</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>target_link_libraries(</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DPPLOpenCLInterface</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE<sp/>${DPCPP_ROOT}/lib/OpenCL.lib</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral">endif()</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral">install(</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/>TARGETS</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/>DPPLSyclInterface</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/>LIBRARY<sp/>DESTINATION</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/>&quot;</highlight><highlight class="normal">${CMAKE_INSTALL_PREFIX}/lib/</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral">install(</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/>TARGETS</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/>DPPLOpenCLInterface</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/>LIBRARY</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/>DESTINATION</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/>&quot;</highlight><highlight class="normal">${CMAKE_INSTALL_PREFIX}/lib/</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral">#<sp/>Install<sp/>all<sp/>headers</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral">file(GLOB<sp/>HEADERS<sp/>&quot;</highlight><highlight class="normal">${CMAKE_SOURCE_DIR}/include</highlight><highlight class="comment">/*.h*&quot;)</highlight></codeline>
<codeline lineno="176"><highlight class="comment">foreach(HEADER<sp/>${HEADERS})</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/>install(FILES<sp/>&quot;${HEADER}&quot;<sp/>DESTINATION<sp/>include)</highlight></codeline>
<codeline lineno="178"><highlight class="comment">endforeach()</highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment">#<sp/>Install<sp/>all<sp/>headers<sp/>in<sp/>include/Support</highlight></codeline>
<codeline lineno="181"><highlight class="comment">file(GLOB<sp/>HEADERS<sp/>&quot;${CMAKE_SOURCE_DIR}/include/Support/*.h*&quot;)</highlight></codeline>
<codeline lineno="182"><highlight class="comment">foreach(HEADER<sp/>${HEADERS})</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>install(FILES<sp/>&quot;${HEADER}&quot;<sp/>DESTINATION<sp/>include/Support)</highlight></codeline>
<codeline lineno="184"><highlight class="comment">endforeach()</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">#<sp/>Enable<sp/>to<sp/>build<sp/>the<sp/>dpCtl<sp/>backend<sp/>test<sp/>cases</highlight></codeline>
<codeline lineno="187"><highlight class="comment">add_subdirectory(tests)</highlight></codeline>
<codeline lineno="188"><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">#<sp/>Todo<sp/>:<sp/>Add<sp/>build<sp/>rules<sp/>for<sp/>doxygen</highlight></codeline>
<codeline lineno="190"><highlight class="comment">#<sp/>maybe<sp/>refer<sp/>https://devblogs.microsoft.com/cppblog/clear-functional-c-documentation-with-sphinx-breathe-doxygen-cmake/</highlight></codeline>
<codeline lineno="191"><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment">add_subdirectory(docs)</highlight></codeline>
    </programlisting>
    <location file="/home/diptorupd/Desktop/devel/dpctl/backends/CMakeLists.txt"/>
  </compounddef>
</doxygen>
