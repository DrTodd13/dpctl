<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="dppl__opencl__interface_8h" kind="file" language="C++">
    <compoundname>dppl_opencl_interface.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>backends/include/dppl_opencl_interface.h</label>
        <link refid="dppl__opencl__interface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structdp__env" prot="public">dp_env</innerclass>
    <innerclass refid="structdp__buffer" prot="public">dp_buffer</innerclass>
    <innerclass refid="structdp__kernel" prot="public">dp_kernel</innerclass>
    <innerclass refid="structdp__program" prot="public">dp_program</innerclass>
    <innerclass refid="structdp__kernel__arg" prot="public">dp_kernel_arg</innerclass>
    <innerclass refid="structdp__runtime" prot="public">dp_runtime</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="dppl__opencl__interface_8h_1a81776019eae18623511d676145f7cdef" prot="public" static="no">
        <name>DPPL_API</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="40" column="14" bodyfile="backends/include/dppl_opencl_interface.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29" prot="public" static="no" strong="no">
        <type></type>
        <name>DP_GLUE_ERROR_CODES</name>
        <enumvalue id="dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a60bed6172a9161c7ca7570174522ff55" prot="public">
          <name>DP_GLUE_SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dppl__opencl__interface_8h_1a414d5545eb64717cf76cdfd716b67b29a9a5f99b6893b1471890b87154ba89315" prot="public">
          <name>DP_GLUE_FAILURE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="45" column="1" bodyfile="backends/include/dppl_opencl_interface.h" bodystart="44" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dppl__opencl__interface_8h_1a60a68d6cb63216c6954c6d6f4db3b6a4" prot="public" static="no">
        <type>struct <ref refid="structdp__env" kindref="compound">dp_env</ref> *</type>
        <definition>typedef struct dp_env* env_t</definition>
        <argsstring></argsstring>
        <name>env_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="68" column="22" bodyfile="backends/include/dppl_opencl_interface.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dppl__opencl__interface_8h_1a162ccb3cf5ba5fd158c0526cb59412c5" prot="public" static="no">
        <type>struct <ref refid="structdp__buffer" kindref="compound">dp_buffer</ref> *</type>
        <definition>typedef struct dp_buffer* buffer_t</definition>
        <argsstring></argsstring>
        <name>buffer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="80" column="25" bodyfile="backends/include/dppl_opencl_interface.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dppl__opencl__interface_8h_1a4032a461689a915b743ca9d075ad8570" prot="public" static="no">
        <type>struct <ref refid="structdp__kernel" kindref="compound">dp_kernel</ref> *</type>
        <definition>typedef struct dp_kernel* kernel_t</definition>
        <argsstring></argsstring>
        <name>kernel_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="90" column="25" bodyfile="backends/include/dppl_opencl_interface.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dppl__opencl__interface_8h_1afad71e6b9f69f779865c7b36fdab8695" prot="public" static="no">
        <type>struct <ref refid="structdp__program" kindref="compound">dp_program</ref> *</type>
        <definition>typedef struct dp_program* program_t</definition>
        <argsstring></argsstring>
        <name>program_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="99" column="26" bodyfile="backends/include/dppl_opencl_interface.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dppl__opencl__interface_8h_1ad6b9cfe3b0fec6fcd179adf2ed2fa12f" prot="public" static="no">
        <type>struct <ref refid="structdp__kernel__arg" kindref="compound">dp_kernel_arg</ref> *</type>
        <definition>typedef struct dp_kernel_arg* kernel_arg_t</definition>
        <argsstring></argsstring>
        <name>kernel_arg_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="109" column="29" bodyfile="backends/include/dppl_opencl_interface.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dppl__opencl__interface_8h_1a02fe9218ba15ed9a5addc7b692d4b8f5" prot="public" static="no">
        <type>struct <ref refid="structdp__runtime" kindref="compound">dp_runtime</ref> *</type>
        <definition>typedef struct dp_runtime* runtime_t</definition>
        <argsstring></argsstring>
        <name>runtime_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="135" column="26" bodyfile="backends/include/dppl_opencl_interface.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dppl__opencl__interface_8h_1af65969c48ec4f4c39acbfa713457dcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_curr_env</definition>
        <argsstring>(runtime_t rt, env_t env)</argsstring>
        <name>set_curr_env</name>
        <param>
          <type><ref refid="structdp__runtime" kindref="compound">runtime_t</ref></type>
          <declname>rt</declname>
        </param>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="138" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="138" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1aa8cc64501aa87250c4a49fcaec2fb0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_runtime</definition>
        <argsstring>(runtime_t *rt)</argsstring>
        <name>create_dp_runtime</name>
        <param>
          <type><ref refid="structdp__runtime" kindref="compound">runtime_t</ref> *</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
<para>Initializes a new <ref refid="structdp__runtime__t" kindref="compound">dp_runtime_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[in/out]</parametername>
</parameternamelist>
<parameterdescription>
<para>rt - An uninitialized runtime_t pointer that is initialized by the function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error code indicating if the runtime_t object was successfully initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="150" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="150" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1ae35d77471215c8e2ab7dd09f07e21eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_runtime</definition>
        <argsstring>(runtime_t *rt)</argsstring>
        <name>destroy_dp_runtime</name>
        <param>
          <type><ref refid="structdp__runtime" kindref="compound">runtime_t</ref> *</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
<para>Free the runtime and all its resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rt</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the numba_one_api_runtime_t object to be freed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error code indicating if resource freeing was successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="161" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="161" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a566b3a99735a0d46ba7c295519e7443e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_rw_mem_buffer</definition>
        <argsstring>(env_t env_t_ptr, size_t buffsize, buffer_t *buff)</argsstring>
        <name>create_dp_rw_mem_buffer</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffsize</declname>
        </param>
        <param>
          <type><ref refid="structdp__buffer" kindref="compound">buffer_t</ref> *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="168" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="168" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1af3c68c97b5f2334f97635c71edb0e586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_rw_mem_buffer</definition>
        <argsstring>(buffer_t *buff)</argsstring>
        <name>destroy_dp_rw_mem_buffer</name>
        <param>
          <type><ref refid="structdp__buffer" kindref="compound">buffer_t</ref> *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="172" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="172" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a28ad28083169569271ae8e82f1b3a580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int write_dp_mem_buffer_to_device</definition>
        <argsstring>(env_t env_t_ptr, buffer_t buff, bool blocking_copy, size_t offset, size_t buffersize, const void *data_ptr)</argsstring>
        <name>write_dp_mem_buffer_to_device</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="structdp__buffer" kindref="compound">buffer_t</ref></type>
          <declname>buff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking_copy</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffersize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="179" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="179" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a57d1dd48b06dbc01af0ca5be40b0a142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_dp_mem_buffer_from_device</definition>
        <argsstring>(env_t env_t_ptr, buffer_t buff, bool blocking_copy, size_t offset, size_t buffersize, void *data_ptr)</argsstring>
        <name>read_dp_mem_buffer_from_device</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="structdp__buffer" kindref="compound">buffer_t</ref></type>
          <declname>buff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking_copy</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffersize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="191" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="191" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1ab1a000f75915669913b4de99edbea1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_program_from_spirv</definition>
        <argsstring>(env_t env_t_ptr, const void *il, size_t length, program_t *program_t_ptr)</argsstring>
        <name>create_dp_program_from_spirv</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>il</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="structdp__program" kindref="compound">program_t</ref> *</type>
          <declname>program_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="203" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="203" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a43b3debedd923d396376be492fbc02d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_program_from_source</definition>
        <argsstring>(env_t env_t_ptr, unsigned int count, const char **strings, const size_t *lengths, program_t *program_t_ptr)</argsstring>
        <name>create_dp_program_from_source</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>strings</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>lengths</declname>
        </param>
        <param>
          <type><ref refid="structdp__program" kindref="compound">program_t</ref> *</type>
          <declname>program_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="213" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="213" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a609e92357cff6d2becc4300fa47fb30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_program</definition>
        <argsstring>(program_t *program_t_ptr)</argsstring>
        <name>destroy_dp_program</name>
        <param>
          <type><ref refid="structdp__program" kindref="compound">program_t</ref> *</type>
          <declname>program_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="223" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="223" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a4128360b3dff32134797e6ca01cc5c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int build_dp_program</definition>
        <argsstring>(env_t env_t_ptr, program_t program_t_ptr)</argsstring>
        <name>build_dp_program</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="structdp__program" kindref="compound">program_t</ref></type>
          <declname>program_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="227" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="227" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a24bbaf66864ceccc643643978d453383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_kernel</definition>
        <argsstring>(env_t env_t_ptr, program_t program_ptr, const char *kernel_name, kernel_t *kernel_ptr)</argsstring>
        <name>create_dp_kernel</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="structdp__program" kindref="compound">program_t</ref></type>
          <declname>program_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kernel_name</declname>
        </param>
        <param>
          <type><ref refid="structdp__kernel" kindref="compound">kernel_t</ref> *</type>
          <declname>kernel_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="233" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="233" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1ad208cdc7cf60e150f128ae54e3073216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_kernel</definition>
        <argsstring>(kernel_t *kernel_ptr)</argsstring>
        <name>destroy_dp_kernel</name>
        <param>
          <type><ref refid="structdp__kernel" kindref="compound">kernel_t</ref> *</type>
          <declname>kernel_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="240" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="240" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a7659b305f3780aa0858c919b6baf4fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_kernel_arg</definition>
        <argsstring>(const void *arg_value, size_t arg_size, kernel_arg_t *kernel_arg_t_ptr)</argsstring>
        <name>create_dp_kernel_arg</name>
        <param>
          <type>const void *</type>
          <declname>arg_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>arg_size</declname>
        </param>
        <param>
          <type><ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref> *</type>
          <declname>kernel_arg_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="247" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="247" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1ac57c05f82c1675fd6cc62c397d33fc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_dp_kernel_arg_from_buffer</definition>
        <argsstring>(buffer_t *buffer_t_ptr, kernel_arg_t *kernel_arg_t_ptr)</argsstring>
        <name>create_dp_kernel_arg_from_buffer</name>
        <param>
          <type><ref refid="structdp__buffer" kindref="compound">buffer_t</ref> *</type>
          <declname>buffer_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref> *</type>
          <declname>kernel_arg_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="256" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="256" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a907bd92804f632a6188250d45b0a245f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int destroy_dp_kernel_arg</definition>
        <argsstring>(kernel_arg_t *kernel_arg_t_ptr)</argsstring>
        <name>destroy_dp_kernel_arg</name>
        <param>
          <type><ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref> *</type>
          <declname>kernel_arg_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="264" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="264" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a7856b6ab74fbbe6536fd81d64562e1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_args_and_enqueue_dp_kernel</definition>
        <argsstring>(env_t env_t_ptr, kernel_t kernel_t_ptr, size_t nargs, const kernel_arg_t *args, unsigned int work_dim, const size_t *global_work_offset, const size_t *global_work_size, const size_t *local_work_size)</argsstring>
        <name>set_args_and_enqueue_dp_kernel</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="structdp__kernel" kindref="compound">kernel_t</ref></type>
          <declname>kernel_t_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nargs</declname>
        </param>
        <param>
          <type>const <ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>work_dim</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>global_work_offset</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>global_work_size</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>local_work_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="271" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="271" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a7522e1967af436d88e8e8fec48dda403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_args_and_enqueue_dp_kernel_auto_blocking</definition>
        <argsstring>(env_t env_t_ptr, kernel_t kernel_t_ptr, size_t nargs, const kernel_arg_t *args, unsigned int num_dims, size_t *dim_starts, size_t *dim_stops)</argsstring>
        <name>set_args_and_enqueue_dp_kernel_auto_blocking</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <param>
          <type><ref refid="structdp__kernel" kindref="compound">kernel_t</ref></type>
          <declname>kernel_t_ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nargs</declname>
        </param>
        <param>
          <type>const <ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_dims</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dim_starts</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dim_stops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="285" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="285" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a042f0d172f36953491338b4049dc740f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int retain_dp_context</definition>
        <argsstring>(env_t env_t_ptr)</argsstring>
        <name>retain_dp_context</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="298" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="298" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="dppl__opencl__interface_8h_1a1dff6cc96c6c5c712d2ed9a221919fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int release_dp_context</definition>
        <argsstring>(env_t env_t_ptr)</argsstring>
        <name>release_dp_context</name>
        <param>
          <type><ref refid="structdp__env" kindref="compound">env_t</ref></type>
          <declname>env_t_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="backends/include/dppl_opencl_interface.h" line="305" column="5" declfile="backends/include/dppl_opencl_interface.h" declline="305" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This file contains the declaration of a C API to expose a lightweight OpenCL interface for the Python dpctl package. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===------------<sp/>dppl_opencl_interface.h<sp/>-<sp/>dpctl-C_API<sp/>-------*-<sp/>C<sp/>-*-----===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>Parallel<sp/>Control<sp/>Library<sp/>(dpCtl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>DPPLOpenCLInterface_EXPORTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>DPPL_API<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>DPPL_API<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>DPPL_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>DP_GLUE_ERROR_CODES</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>DP_GLUE_SUCCESS<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>DP_GLUE_FAILURE<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structdp__env" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__env" kindref="compound">dp_env</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>id_;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>:<sp/>Add<sp/>members<sp/>to<sp/>store<sp/>more<sp/>device<sp/>related<sp/>information<sp/>such<sp/>as<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*device;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*queue;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_work_item_dims;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_work_group_size;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>support_int64_atomics;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>support_float64_atomics;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*dump_fn)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__env" kindref="compound">dp_env</ref>*<sp/><ref refid="structdp__env" kindref="compound">env_t</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structdp__buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__buffer" kindref="compound">dp_buffer</ref></highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>id_;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>may,<sp/>for<sp/>example,<sp/>be<sp/>a<sp/>cl_mem<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer_ptr;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stores<sp/>the<sp/>size<sp/>of<sp/>the<sp/>buffer_ptr<sp/>(e.g<sp/>sizeof(cl_mem))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeof_buffer_ptr;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__buffer" kindref="compound">dp_buffer</ref>*<sp/><ref refid="structdp__buffer" kindref="compound">buffer_t</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structdp__kernel" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__kernel" kindref="compound">dp_kernel</ref></highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>id_;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*kernel;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*dump_fn)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__kernel" kindref="compound">dp_kernel</ref>*<sp/><ref refid="structdp__kernel" kindref="compound">kernel_t</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structdp__program" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__program" kindref="compound">dp_program</ref></highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>id_;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*program;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__program" kindref="compound">dp_program</ref>*<sp/><ref refid="structdp__program" kindref="compound">program_t</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structdp__kernel__arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__kernel__arg" kindref="compound">dp_kernel_arg</ref></highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>id_;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_value;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arg_size;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__kernel__arg" kindref="compound">dp_kernel_arg</ref>*<sp/><ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="structdp__runtime" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__runtime" kindref="compound">dp_runtime</ref></highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>id_;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_platforms;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*platform_ids;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_cpu;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_gpu;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdp__env" kindref="compound">env_t</ref><sp/>first_cpu_env;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdp__env" kindref="compound">env_t</ref><sp/>first_gpu_env;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdp__env" kindref="compound">env_t</ref><sp/>curr_env;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*dump_fn)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdp__runtime" kindref="compound">dp_runtime</ref>*<sp/><ref refid="structdp__runtime" kindref="compound">runtime_t</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_curr_env<sp/>(<ref refid="structdp__runtime" kindref="compound">runtime_t</ref><sp/>rt,<sp/><ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dppl__opencl__interface_8h_1aa8cc64501aa87250c4a49fcaec2fb0b2" kindref="member">create_dp_runtime</ref><sp/>(<ref refid="structdp__runtime" kindref="compound">runtime_t</ref><sp/>*rt);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dppl__opencl__interface_8h_1ae35d77471215c8e2ab7dd09f07e21eea" kindref="member">destroy_dp_runtime</ref><sp/>(<ref refid="structdp__runtime" kindref="compound">runtime_t</ref><sp/>*rt);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_dp_rw_mem_buffer<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffsize,<sp/><ref refid="structdp__buffer" kindref="compound">buffer_t</ref><sp/>*buff);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destroy_dp_rw_mem_buffer<sp/>(<ref refid="structdp__buffer" kindref="compound">buffer_t</ref><sp/>*buff);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_dp_mem_buffer_to_device<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__buffer" kindref="compound">buffer_t</ref><sp/>buff,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blocking_copy,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data_ptr);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_dp_mem_buffer_from_device<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__buffer" kindref="compound">buffer_t</ref><sp/>buff,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blocking_copy,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data_ptr);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_dp_program_from_spirv<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*il,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__program" kindref="compound">program_t</ref><sp/>*program_t_ptr);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_dp_program_from_source<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**strings,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*lengths,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__program" kindref="compound">program_t</ref><sp/>*program_t_ptr);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destroy_dp_program<sp/>(<ref refid="structdp__program" kindref="compound">program_t</ref><sp/>*program_t_ptr);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_dp_program<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,<sp/><ref refid="structdp__program" kindref="compound">program_t</ref><sp/>program_t_ptr);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_dp_kernel<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__program" kindref="compound">program_t</ref><sp/>program_ptr,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kernel_name,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__kernel" kindref="compound">kernel_t</ref><sp/>*kernel_ptr);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destroy_dp_kernel<sp/>(<ref refid="structdp__kernel" kindref="compound">kernel_t</ref><sp/>*kernel_ptr);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_dp_kernel_arg<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_value,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arg_size,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*kernel_arg_t_ptr);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_dp_kernel_arg_from_buffer<sp/>(<ref refid="structdp__buffer" kindref="compound">buffer_t</ref><sp/>*buffer_t_ptr,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*kernel_arg_t_ptr);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destroy_dp_kernel_arg<sp/>(<ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*kernel_arg_t_ptr);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_args_and_enqueue_dp_kernel<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__kernel" kindref="compound">kernel_t</ref><sp/>kernel_t_ptr,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nargs,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*args,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>work_dim,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*global_work_offset,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*global_work_size,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*local_work_size);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_args_and_enqueue_dp_kernel_auto_blocking<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdp__kernel" kindref="compound">kernel_t</ref><sp/>kernel_t_ptr,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nargs,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdp__kernel__arg" kindref="compound">kernel_arg_t</ref><sp/>*args,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_dims,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dim_starts,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dim_stops);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retain_dp_context<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">DPPL_API</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>release_dp_context<sp/>(<ref refid="structdp__env" kindref="compound">env_t</ref><sp/>env_t_ptr);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//----<sp/>TODO:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>Add<sp/>release/retain<sp/>methods<sp/>for<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//---------</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="backends/include/dppl_opencl_interface.h"/>
  </compounddef>
</doxygen>
