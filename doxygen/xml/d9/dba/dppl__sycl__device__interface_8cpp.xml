<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="d9/dba/dppl__sycl__device__interface_8cpp" kind="file" language="C++">
    <compoundname>dppl_sycl_device_interface.cpp</compoundname>
    <includes refid="d8/d8f/dppl__sycl__device__interface_8h" local="yes">dppl_sycl_device_interface.h</includes>
    <includes refid="d1/d38/CBindingWrapping_8h" local="yes">Support/CBindingWrapping.h</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">CL/sycl.hpp</includes>
    <incdepgraph>
      <node id="13">
        <label>iomanip</label>
      </node>
      <node id="15">
        <label>CL/sycl.hpp</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>dppl_sycl_device_interface.cpp</label>
        <link refid="d9/dba/dppl__sycl__device__interface_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Support/CBindingWrapping.h</label>
        <link refid="d1/d38/CBindingWrapping_8h"/>
      </node>
      <node id="2">
        <label>dppl_sycl_device_interface.h</label>
        <link refid="d8/d8f/dppl__sycl__device__interface_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Support/DllExport.h</label>
        <link refid="d6/d26/DllExport_8h"/>
      </node>
      <node id="7">
        <label>dppl_sycl_enum_types.h</label>
        <link refid="d9/d4f/dppl__sycl__enum__types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/types.h</label>
      </node>
      <node id="3">
        <label>dppl_data_types.h</label>
        <link refid="d4/dcc/dppl__data__types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>dppl_sycl_types.h</label>
        <link refid="d4/d8f/dppl__sycl__types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>Support/ExternC.h</label>
        <link refid="d2/d0a/ExternC_8h"/>
      </node>
      <node id="11">
        <label>Support/MemOwnershipAttrs.h</label>
        <link refid="d4/d8c/MemOwnershipAttrs_8h"/>
      </node>
      <node id="4">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1a59009126411ff0dc7f3947efc8341400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPPLDevice_Delete</definition>
        <argsstring>(__dppl_take DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_Delete</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1ga992ba513554faa4a42a193e0f31c4cb7" kindref="member">__dppl_take</ref> <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Deletes a DPPLSyclDeviceRef pointer after casting to to sycl::device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>The DPPLSyclDeviceRef pointer to be freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="99" column="6" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1aeea6c24f218268d4350c61358096c0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPPLDevice_DumpInfo</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_DumpInfo</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Prints out some of the info::deivice attributes for the device. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints some of the device info metadata for the device corresponding to the specified sycl::queue. Currently, device name, driver version, device vendor, and device profile are printed out. More attributed may be added later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="92" column="6" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1a2e52dec1ea56462d838f4b22ce189d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref> char *</type>
        <definition>const __dppl_give char* DPPLDevice_GetDriverInfo</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_GetDriverInfo</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Returns the OpenCL software driver version as a C string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A C string in the form major_number.minor.number that corresponds to the OpenCL driver version if this is a OpenCL device. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="144" column="1" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1a1bd4980d55b59455f5afb64d6ccd4fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref> char *</type>
        <definition>const __dppl_give char* DPPLDevice_GetName</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_GetName</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Returns a C string for the device name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A C string containing the OpenCL device name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="126" column="1" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1a7e874d1e160aa60eb47b2001ce997b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref> char *</type>
        <definition>const __dppl_give char* DPPLDevice_GetVendorName</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_GetVendorName</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Returns a C string corresponding to the vendor name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A C string containing the OpenCL device vendor name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="135" column="1" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1a0cf642fd62d4fb84cf259b3b882583ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DPPLDevice_IsAccelerator</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_IsAccelerator</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Returns true if this SYCL device is an OpenCL device and the device type is sycl::info::device_type::accelerator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the device type is an accelerator, else False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="104" column="6" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1a0eb0429307a52e31a370e4c1e85c4a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DPPLDevice_IsCPU</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_IsCPU</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Returns true if this SYCL device is an OpenCL device and the device type is sycl::info::device_type::cpu. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the device type is a cpu, else False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="109" column="6" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1a0b5ff4ec0cd66cab4ddc1a0673eebeac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DPPLDevice_IsGPU</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_IsGPU</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Returns true if this SYCL device is an OpenCL device and the device type is sycl::info::device_type::gpu. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the device type is a gpu, else False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="114" column="6" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1af404415e8df79c740ae9070e7c5d46a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DPPLDevice_IsHost</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_IsHost</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Returns true if this SYCL device is a host device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the device is a host device, else False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="120" column="6" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="d9/dba/dppl__sycl__device__interface_8cpp_1af87056a71e298c0e2b7d07be740c6e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DPPLDevice_IsHostUnifiedMemory</definition>
        <argsstring>(__dppl_keep const DPPLSyclDeviceRef DRef)</argsstring>
        <name>DPPLDevice_IsHostUnifiedMemory</name>
        <param>
          <type><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref> const <ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <briefdescription>
<para>Returns True if the device and the host share a unified memory subsystem, else returns False. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean indicating if the device shares a unified memory subsystem with the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" line="152" column="6" bodyfile="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This file implements the data types and functions declared in <ref refid="d8/d8f/dppl__sycl__device__interface_8h" kindref="compound">dppl_sycl_device_interface.h</ref>. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===------<sp/>dppl_sycl_device_interface.cpp<sp/>-<sp/>dpctl-C_API<sp/><sp/>---*---<sp/>C++<sp/>--*--===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>Parallel<sp/>Control<sp/>Library<sp/>(dpCtl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d8f/dppl__sycl__device__interface_8h" kindref="compound">dppl_sycl_device_interface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d38/CBindingWrapping_8h" kindref="compound">Support/CBindingWrapping.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CL/sycl.hpp&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SYCL<sp/>headers<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">cl::sycl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>wrappers<sp/>for<sp/>C<sp/>Binding<sp/>types<sp/>(see<sp/>CBindingWrapping.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="d1/d38/CBindingWrapping_8h_1a65c769c08fa9fee7f298ad9c9eee5e05" kindref="member">DEFINE_SIMPLE_CONVERSION_FUNCTIONS</ref>(device,<sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_device_info<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>device<sp/>&amp;<sp/>Device)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Device.get_info&lt;info::device::name&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Driver<sp/>version&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Device.get_info&lt;info::device::driver_version&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vendor&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Device.get_info&lt;info::device::vendor&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Profile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Device.get_info&lt;info::device::profile&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>devTy<sp/>=<sp/>Device.get_info&lt;info::device::device_type&gt;();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(devTy)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>info::device_type::cpu:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>info::device_type::gpu:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gpu&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>info::device_type::accelerator:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;accelerator&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>info::device_type::custom:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;custom&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>info::device_type::host:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;host&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>ss.str();</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>anonymous<sp/>namespace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="d9/dba/dppl__sycl__device__interface_8cpp_1aeea6c24f218268d4350c61358096c0ed" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1aeea6c24f218268d4350c61358096c0ed" kindref="member">DPPLDevice_DumpInfo</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Device<sp/>=<sp/>unwrap(DRef);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>dump_device_info(*Device);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="d9/dba/dppl__sycl__device__interface_8cpp_1a59009126411ff0dc7f3947efc8341400" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1a59009126411ff0dc7f3947efc8341400" kindref="member">DPPLDevice_Delete</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1ga992ba513554faa4a42a193e0f31c4cb7" kindref="member">__dppl_take</ref><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>unwrap(DRef);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="d9/dba/dppl__sycl__device__interface_8cpp_1a0cf642fd62d4fb84cf259b3b882583ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1a0cf642fd62d4fb84cf259b3b882583ca" kindref="member">DPPLDevice_IsAccelerator</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unwrap(DRef)-&gt;is_accelerator();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="d9/dba/dppl__sycl__device__interface_8cpp_1a0eb0429307a52e31a370e4c1e85c4a48" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1a0eb0429307a52e31a370e4c1e85c4a48" kindref="member">DPPLDevice_IsCPU</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unwrap(DRef)-&gt;is_cpu();</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="d9/dba/dppl__sycl__device__interface_8cpp_1a0b5ff4ec0cd66cab4ddc1a0673eebeac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1a0b5ff4ec0cd66cab4ddc1a0673eebeac" kindref="member">DPPLDevice_IsGPU</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unwrap(DRef)-&gt;is_gpu();</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="d9/dba/dppl__sycl__device__interface_8cpp_1af404415e8df79c740ae9070e7c5d46a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1af404415e8df79c740ae9070e7c5d46a6" kindref="member">DPPLDevice_IsHost</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unwrap(DRef)-&gt;is_host();</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="126" refid="d9/dba/dppl__sycl__device__interface_8cpp_1a1bd4980d55b59455f5afb64d6ccd4fa5" refkind="member"><highlight class="normal"><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1a1bd4980d55b59455f5afb64d6ccd4fa5" kindref="member">DPPLDevice_GetName</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>unwrap(DRef)-&gt;get_info&lt;info::device::name&gt;();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cstr_name<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>[name.length()+1];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::strcpy<sp/>(cstr_name,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cstr_name;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="135" refid="d9/dba/dppl__sycl__device__interface_8cpp_1a7e874d1e160aa60eb47b2001ce997b90" refkind="member"><highlight class="normal"><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1a7e874d1e160aa60eb47b2001ce997b90" kindref="member">DPPLDevice_GetVendorName</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vendor<sp/>=<sp/>unwrap(DRef)-&gt;get_info&lt;info::device::name&gt;();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cstr_vendor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>[vendor.length()+1];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::strcpy<sp/>(cstr_vendor,<sp/>vendor.c_str());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cstr_vendor;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad5917e4c2b4b0ab2b83b624964c60753" kindref="member">__dppl_give</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="144" refid="d9/dba/dppl__sycl__device__interface_8cpp_1a2e52dec1ea56462d838f4b22ce189d09" refkind="member"><highlight class="normal"><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1a2e52dec1ea56462d838f4b22ce189d09" kindref="member">DPPLDevice_GetDriverInfo</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>driver<sp/>=<sp/>unwrap(DRef)-&gt;get_info&lt;info::device::driver_version&gt;();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cstr_driver<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>[driver.length()+1];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::strcpy<sp/>(cstr_driver,<sp/>driver.c_str());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cstr_driver;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="d9/dba/dppl__sycl__device__interface_8cpp_1af87056a71e298c0e2b7d07be740c6e9e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dba/dppl__sycl__device__interface_8cpp_1af87056a71e298c0e2b7d07be740c6e9e" kindref="member">DPPLDevice_IsHostUnifiedMemory</ref><sp/>(<ref refid="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gad4d9a56ef90f267f24386752c8f0d365" kindref="member">__dppl_keep</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8f/dppl__sycl__types_8h_1aa9dcc61bc2537114d09726e4cf5e424a" kindref="member">DPPLSyclDeviceRef</ref><sp/>DRef)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unwrap(DRef)-&gt;get_info&lt;info::device::host_unified_memory&gt;();</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/diptorupd/Desktop/devel/dpctl/backends/source/dppl_sycl_device_interface.cpp"/>
  </compounddef>
</doxygen>
